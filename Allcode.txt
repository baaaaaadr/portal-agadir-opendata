Contexte Complet du Projet: portal-agadir-opendata
Généré le: 2025-04-14T22:59:36.907Z

=== ARBORESCENCE DU PROJET (Simplifiée) ===
portal-agadir-opendata
├── eslint.config.js
├── index.html
├── package.json
├── postcss.config.js
├── public
│   ├── apple-touch-icon.png
│   ├── favicon-32x32.png
│   ├── logo.png
│   ├── mstile-150x150.png
│   ├── pwa-192x192.png
│   ├── pwa-512x512.png
│   └── vite.svg
├── README.md
├── src
│   ├── App.css
│   ├── App.jsx
│   ├── assets
│   │   ├── about-illustration.png
│   │   ├── agadir-hero.jpg
│   │   ├── bus-banner.jpg
│   │   ├── equipements-banner.jpg
│   │   ├── hotels-banner.jpg
│   │   ├── jardin-generic-card.jpg
│   │   ├── jardins-banner.jpg
│   │   ├── logo.svg
│   │   └── react.svg
│   ├── components
│   │   ├── datasets
│   │   │   ├── DatasetCardCatalog.jsx
│   │   │   ├── DatasetCardHome.jsx
│   │   │   └── MetadataBlock.jsx
│   │   ├── maps
│   │   │   ├── EquipementsMap.jsx
│   │   │   ├── HotelsMap.jsx
│   │   │   └── JardinsMap.jsx
│   │   ├── ThemeToggle.jsx
│   │   ├── ui
│   │   │   └── Tabs.jsx
│   │   └── visualizations
│   │       ├── CoutParQuartierChart.jsx
│   │       └── HotelsParClassementChart.jsx
│   ├── index.css
│   ├── main.jsx
│   ├── pages
│   │   ├── AboutPage.jsx
│   │   ├── CatalogPage.jsx
│   │   ├── EquipementsPage.jsx
│   │   ├── HomePage.jsx
│   │   ├── HotelsPage.jsx
│   │   ├── JardinsPage.jsx
│   │   ├── LignesBusPage.jsx
│   │   └── NotFoundPage.jsx
│   ├── services
│   │   ├── busService.js
│   │   ├── equipementService.js
│   │   ├── hotelService.js
│   │   └── jardinService.js
│   ├── supabaseClient.js
│   └── utils
│       └── exportUtils.js
├── tailwind.config.js
└── vite.config.js


=== CONTENU DES FICHIERS ===

--- START OF FILE: README.md ---
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript and enable type-aware lint rules. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

--- END OF FILE: README.md ---

--- START OF FILE: eslint.config.js ---
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

--- END OF FILE: eslint.config.js ---

--- START OF FILE: index.html ---
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#3E8CAA">
    <title>Portail Open Data Agadir</title>
    <link rel="icon" href="/favicon.svg" type="image/svg+xml">
    <link rel="alternate icon" href="/favicon.ico" sizes="any">
    <link rel="apple-touch-icon" href="/apple-touch-icon.png">
    <link rel="manifest" href="/manifest.webmanifest">
  </head>
  <body class="font-body">
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

--- END OF FILE: index.html ---

--- START OF FILE: package.json ---
{
  "name": "portal-agadir-opendata",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "context": "node scripts/create-context.js"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.49.4",
    "chart.js": "^4.4.8",
    "jspdf": "^3.0.1",
    "jspdf-autotable": "^5.0.2",
    "leaflet": "^1.9.4",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.5.0",
    "react-leaflet": "^5.0.0",
    "react-router-dom": "^7.5.0",
    "xlsx": "^0.18.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "vite": "^6.2.0",
    "vite-plugin-pwa": "^1.0.0"
  }
}

--- END OF FILE: package.json ---

--- START OF FILE: postcss.config.js ---
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
--- END OF FILE: postcss.config.js ---

--- START OF FILE: src/App.css ---
/*
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
*/

--- END OF FILE: src/App.css ---

--- START OF FILE: src/App.jsx ---
import { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes, Link, NavLink } from 'react-router-dom';
// --- Add Icons ---
import { FiMenu, FiX } from 'react-icons/fi';
import './App.css';
import ThemeToggle from './components/ThemeToggle';
import HomePage from './pages/HomePage';
import CatalogPage from './pages/CatalogPage';
import AboutPage from './pages/AboutPage';
import EquipementsPage from './pages/EquipementsPage';
import HotelsPage from './pages/HotelsPage';
import JardinsPage from './pages/JardinsPage';
import LignesBusPage from './pages/LignesBusPage';
import NotFoundPage from './pages/NotFoundPage';
import logoUrl from './assets/logo.svg'; // Import your logo file

function App() {
  const [theme, setTheme] = useState(() => {
    // ... (theme logic remains the same) ...
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
        return savedTheme;
    } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'dark';
    }
    return 'light';
  });

  // --- State for Mobile Menu ---
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  useEffect(() => {
    // ... (theme effect remains the same) ...
    const html = document.documentElement;
    if (theme === 'dark') {
      html.classList.add('dark');
    } else {
      html.classList.remove('dark');
    }
    localStorage.setItem('theme', theme);
    // console.log(`Theme changed to: ${theme}`); // Keep if useful for debugging
  }, [theme]);

  const toggleTheme = () => {
    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));
  };

  // --- Function to close mobile menu ---
  const closeMobileMenu = () => {
    setIsMobileMenuOpen(false);
  };

  const activeClassName = "bg-primary-dark dark:bg-neutral-bg-alt-dark";
  const mobileLinkClass = "block font-body text-white px-3 py-2 rounded-md text-base font-medium hover:bg-primary-light dark:hover:bg-neutral-bg-dark transition-colors duration-150"; // Base class for mobile links
  const mobileActiveClassName = "bg-primary-dark dark:bg-neutral-bg-alt-dark"; // Active class for mobile


  return (
    <Router>
      <div className="min-h-screen flex flex-col bg-neutral-bg-light dark:bg-neutral-bg-dark transition-colors duration-200">

        {/* --- Sticky Navbar --- */}
        <nav className="bg-primary dark:bg-neutral-surface-dark shadow-md sticky top-0 z-50">
          <div className="max-w-full mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between h-16">
              {/* Logo */}
              <div className="flex items-center">
                <Link
                  to="/"
                  className="flex items-center text-white hover:opacity-90"
                  aria-label="Accueil - Portail Opendata Agadir"
                  onClick={closeMobileMenu} // Close menu if logo is clicked
                >
                  {/* Use an img tag for the logo */}
                  <img src={logoUrl} alt="OpenData Agadir Logo" className="h-8 w-auto" /> {/* Adjust height (h-8) as needed */}
                </Link>
              </div>

              {/* Desktop Navigation Links */}
              <div className="hidden sm:ml-6 sm:flex sm:space-x-1 items-center">
                 <NavLink
                   to="/"
                   className={({ isActive }) =>
                      `font-body text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-primary-light dark:hover:bg-neutral-bg-dark transition-colors duration-150 ${isActive ? activeClassName : ''}`
                   }
                 >
                   Accueil
                 </NavLink>
                 <NavLink
                    to="/catalogue"
                    className={({ isActive }) =>
                       `font-body text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-primary-light dark:hover:bg-neutral-bg-dark transition-colors duration-150 ${isActive ? activeClassName : ''}`
                    }
                 >
                    Catalogue
                 </NavLink>
                 <NavLink
                    to="/a-propos"
                    className={({ isActive }) =>
                       `font-body text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-primary-light dark:hover:bg-neutral-bg-dark transition-colors duration-150 ${isActive ? activeClassName : ''}`
                    }
                 >
                   À Propos
                 </NavLink>
              </div>

              {/* Right side items: Mobile Menu Button */}
              <div className="flex items-center">
                 {/* Mobile Menu Button (Visible only on sm screens) */}
                 <div className="sm:hidden">
                    <button
                      onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                      type="button"
                      className="inline-flex items-center justify-center p-2 rounded-md text-white hover:bg-primary-light focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
                      aria-controls="mobile-menu"
                      aria-expanded={isMobileMenuOpen}
                      aria-label={isMobileMenuOpen ? "Fermer le menu principal" : "Ouvrir le menu principal"}
                    >
                      <span className="sr-only">Ouvrir/Fermer menu</span>
                      {isMobileMenuOpen ? (
                        <FiX className="block h-6 w-6" aria-hidden="true" />
                      ) : (
                        <FiMenu className="block h-6 w-6" aria-hidden="true" />
                      )}
                    </button>
                 </div>
              </div>
            </div>
          </div>

          {/* Mobile Menu, show/hide based on state */}
          {/* Positioned absolutely below the navbar */}
          <div
             className={`${isMobileMenuOpen ? 'block' : 'hidden'} sm:hidden absolute top-16 inset-x-0 z-40 bg-primary dark:bg-neutral-surface-dark shadow-lg`}
             id="mobile-menu"
           >
            <div className="px-2 pt-2 pb-3 space-y-1">
              <NavLink
                to="/"
                className={({ isActive }) => `${mobileLinkClass} ${isActive ? mobileActiveClassName : ''}` }
                onClick={closeMobileMenu} // Close menu on click
              >
                Accueil
              </NavLink>
              <NavLink
                to="/catalogue"
                className={({ isActive }) => `${mobileLinkClass} ${isActive ? mobileActiveClassName : ''}` }
                onClick={closeMobileMenu} // Close menu on click
              >
                Catalogue
              </NavLink>
              <NavLink
                to="/a-propos"
                className={({ isActive }) => `${mobileLinkClass} ${isActive ? mobileActiveClassName : ''}` }
                onClick={closeMobileMenu} // Close menu on click
              >
                À Propos
              </NavLink>
            </div>
          </div>
        </nav>

        {/* --- Main Content --- */}
        <main className="flex-grow w-full">
          <Routes>
            {/* ... Routes remain the same ... */}
            <Route path="/" element={<HomePage />} />
            <Route path="/catalogue" element={<CatalogPage />} />
            <Route path="/a-propos" element={<AboutPage />} />

            <Route path="/equipements" element={<EquipementsPage theme={theme} />} />
            <Route path="/hotels" element={<HotelsPage theme={theme} />} />
            <Route path="/jardins" element={<JardinsPage theme={theme} />} />
            <Route path="/lignes-bus" element={<LignesBusPage theme={theme} />} />

            <Route path="*" element={<NotFoundPage />} />
          </Routes>
        </main>

        {/* --- Footer --- */}
        <footer className="bg-neutral-surface-light dark:bg-neutral-surface-dark mt-auto border-t border-neutral-light-sand dark:border-neutral-bg-alt-dark">
          <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center text-xs">
            {/* Copyright Text */}
            <p className="text-neutral-text-muted-light dark:text-neutral-text-muted-dark font-body">
              {new Date().getFullYear()} Portail Open Data Agadir - Propulsé par la Commune d'Agadir.
            </p>
            {/* Theme Toggle */}
            <div>
                <ThemeToggle theme={theme} toggleTheme={toggleTheme} />
            </div>
          </div>
        </footer>

      </div>
    </Router>
  );
}

export default App;
--- END OF FILE: src/App.jsx ---

--- START OF FILE: src/components/ThemeToggle.jsx ---
import React from 'react';

function ThemeToggle({ theme, toggleTheme }) {
  return (
    <button
      onClick={toggleTheme}
      className="relative p-1 rounded-lg hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark transition-colors duration-200"
      aria-label="Basculer le thème"
      title="Basculer le thème"
    >
      <svg
        className={`w-6 h-6 transition-transform duration-200 ${theme === 'dark' ? 'rotate-180' : ''}`}
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
        />
      </svg>
    </button>
  );
}

export default ThemeToggle;

--- END OF FILE: src/components/ThemeToggle.jsx ---

--- START OF FILE: src/components/datasets/DatasetCardCatalog.jsx ---
import React from 'react';
import { Link } from 'react-router-dom';
import { FiTable, FiMap, FiBarChart2 } from 'react-icons/fi';

function DatasetCardCatalog({ title, description, theme, keywords, lastUpdated, views, linkTo }) {
  // Contenu simple pour l'instant
  return (
    <div className="p-4 border rounded-lg shadow bg-neutral-surface-light dark:bg-neutral-surface-dark flex flex-col h-full hover:shadow-md transition-shadow duration-200">
      <h3 className="text-lg font-semibold font-heading mb-2 text-neutral-text-light dark:text-neutral-text-dark">{title}</h3>
      <p className="text-sm text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-3 flex-grow">
        {description}
      </p>
      {/* Placeholder pour les métadonnées et icônes */}
      <div className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark mt-auto pt-2 border-t border-neutral-light-sand dark:border-neutral-bg-alt-dark">
        <p>Thème: {theme || 'N/A'} | Maj: {lastUpdated || 'N/A'}</p>
        {/* Afficher les icônes des vues disponibles */}
        <div className="mt-2 flex items-center space-x-2 pt-1">
          <span className="font-medium text-[11px]">Vues:</span>
          {views?.table && <FiTable className="w-4 h-4" title="Tableau disponible" />}
          {views?.map && <FiMap className="w-4 h-4" title="Carte disponible" />}
          {views?.chart && <FiBarChart2 className="w-4 h-4" title="Graphique disponible" />}
        </div>
      </div>
      <Link
        to={linkTo}
        className="inline-block mt-3 text-sm font-medium text-primary dark:text-primary-light hover:underline self-start"
      >
        Voir les détails
      </Link>
    </div>
  );
}

export default DatasetCardCatalog;

--- END OF FILE: src/components/datasets/DatasetCardCatalog.jsx ---

--- START OF FILE: src/components/datasets/DatasetCardHome.jsx ---
import React from 'react';
import { Link } from 'react-router-dom'; 
import { FiDatabase } from 'react-icons/fi'; 

function DatasetCardHome({ title, icon, linkTo }) {
  // Contenu simple pour l'instant
  return (
    // Assurer l'utilisation de surface-light/dark, border, et shadow
    <div className="p-4 border border-neutral-light-sand dark:border-neutral-bg-alt-dark rounded-lg shadow bg-neutral-surface-light dark:bg-neutral-surface-dark hover:shadow-md transition-shadow duration-200 flex flex-col h-full">
      {/* Utiliser l'icône passée en prop ou l'icône par défaut */}
      <div className="text-3xl mb-3 text-primary dark:text-primary-light">
        {icon ? icon : <FiDatabase />}
      </div>
      <h3 className="text-lg font-semibold font-heading mb-2 text-neutral-text-light dark:text-neutral-text-dark flex-grow">{title}</h3>
      <Link
        to={linkTo}
        className="inline-block text-sm font-medium text-primary dark:text-primary-light hover:underline"
      >
        Explorer
      </Link>
    </div>
  );
}

export default DatasetCardHome;

--- END OF FILE: src/components/datasets/DatasetCardHome.jsx ---

--- START OF FILE: src/components/datasets/MetadataBlock.jsx ---
import React from 'react';

function MetadataBlock({ title, description, source, dateMaj, licence, tags }) {
  // Contenu simple pour l'instant
  return (
    <div className="p-4 sm:p-6 border border-secondary dark:border-neutral-bg-alt-dark rounded-lg shadow-sm bg-neutral-bg-alt-light dark:bg-neutral-surface-dark mb-8"> 
      <h2 className="text-2xl md:text-3xl font-bold font-heading mb-3 text-neutral-text-light dark:text-neutral-text-dark">{title}</h2>
      <p className="text-base font-body mb-4 text-neutral-text-light dark:text-neutral-text-dark">{description}</p> 
      <div className="text-sm space-y-1 text-neutral-text-muted-light dark:text-neutral-text-muted-dark border-t border-secondary-dark dark:border-neutral-bg-alt-dark pt-3">
        <p><strong>Source:</strong> {source || 'N/A'}</p>
        <p><strong>Dernière mise à jour:</strong> {dateMaj || 'N/A'}</p>
        <p><strong>Licence:</strong> {licence || 'Licence Ouverte (Simulation)'}</p> 
        {tags && tags.length > 0 && (
          <div className="flex flex-wrap gap-1 pt-1">
             <strong>Tags:</strong>
             {tags.map(tag => (
                 <span key={tag} className="ml-1 px-2 py-0.5 bg-secondary dark:bg-neutral-bg-dark text-neutral-charcoal dark:text-secondary-light rounded-full text-xs">
                     {tag}
                 </span>
             ))}
          </div>
        )}
      </div>
    </div>
  );
}

export default MetadataBlock;

--- END OF FILE: src/components/datasets/MetadataBlock.jsx ---

--- START OF FILE: src/components/maps/EquipementsMap.jsx ---
import React from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import L from 'leaflet';

// --- Correction pour l'icône par défaut de Leaflet (même que pour HotelsMap) ---
import iconRetinaUrl from 'leaflet/dist/images/marker-icon-2x.png';
import iconUrl from 'leaflet/dist/images/marker-icon.png';
import shadowUrl from 'leaflet/dist/images/marker-shadow.png';

const DefaultIcon = L.icon({
    iconRetinaUrl,
    iconUrl,
    shadowUrl,
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
});

L.Marker.prototype.options.icon = DefaultIcon;
// --- Fin de la correction de l'icône ---

// Centre approximatif d'Agadir et niveau de zoom (peut être le même que pour les hôtels)
const AGADIR_CENTER = [30.42, -9.59]; // Latitude, Longitude
const INITIAL_ZOOM = 12; // Zoom un peu moins fort pour voir plus large ? à ajuster

function EquipementsMap({ equipements }) {
  // Filtrer les équipements pour ne garder que ceux avec des coordonnées valides
  const equipementsWithCoords = equipements.filter(equip =>
    equip.geom &&
    equip.geom.type === 'Point' &&
    Array.isArray(equip.geom.coordinates) &&
    equip.geom.coordinates.length === 2 &&
    typeof equip.geom.coordinates[0] === 'number' && // longitude
    typeof equip.geom.coordinates[1] === 'number'    // latitude
  );

  if (equipementsWithCoords.length === 0) {
       return <p className="text-center text-neutral-text-muted-light dark:text-neutral-text-muted-dark">Aucune donnée géographique disponible pour afficher la carte des équipements.</p>;
  }

  return (
    <div className="my-8 rounded-lg shadow-md overflow-hidden">
      <MapContainer
         center={AGADIR_CENTER}
         zoom={INITIAL_ZOOM}
         scrollWheelZoom={true}
         style={{ height: '500px', width: '100%' }}
       >
        <TileLayer
          attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />

        {equipementsWithCoords.map(equip => {
          // IMPORTANT : Inverser les coordonnées de GeoJSON [lon, lat] vers Leaflet [lat, lon]
          const position = [equip.geom.coordinates[1], equip.geom.coordinates[0]];

          return (
            <Marker key={equip.id} position={position}>
              <Popup>
                <div className="font-body">
                  <strong className="font-semibold block text-base mb-1">{equip.projet_nom || 'Équipement'}</strong>
                  <span className="block text-sm text-gray-600">Quartier: {equip.quartier || 'N/A'}</span>
                  {equip.composantes && (
                       <p className="text-xs mt-1 border-t pt-1">
                            {equip.composantes.split('\n').map((line, index) => (
                                <span key={index} className="block">{line.trim()}</span>
                            ))}
                       </p>
                  )}
                   {typeof equip.cout_total === 'number' && (
                       <p className="text-xs mt-1 font-medium">
                           Coût: {equip.cout_total.toLocaleString('fr-MA', { style: 'currency', currency: 'MAD', minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                       </p>
                   )}
                </div>
              </Popup>
            </Marker>
          );
        })}
      </MapContainer>
    </div>
  );
}

export default EquipementsMap;

--- END OF FILE: src/components/maps/EquipementsMap.jsx ---

--- START OF FILE: src/components/maps/HotelsMap.jsx ---
import React from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import L from 'leaflet'; // Importe L pour gérer les icônes

// --- Correction pour l'icône par défaut de Leaflet avec Vite/React ---
// Voir: https://github.com/PaulLeCam/react-leaflet/issues/808
import iconRetinaUrl from 'leaflet/dist/images/marker-icon-2x.png';
import iconUrl from 'leaflet/dist/images/marker-icon.png';
import shadowUrl from 'leaflet/dist/images/marker-shadow.png';

const DefaultIcon = L.icon({
    iconRetinaUrl,
    iconUrl,
    shadowUrl,
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
});

L.Marker.prototype.options.icon = DefaultIcon;
// --- Fin de la correction de l'icône ---

// Centre approximatif d'Agadir et niveau de zoom
const AGADIR_CENTER = [30.42, -9.59]; // Latitude, Longitude
const INITIAL_ZOOM = 13;

function HotelsMap({ hotels }) {

  // Filtrer les hôtels pour ne garder que ceux avec des coordonnées valides
  const hotelsWithCoords = hotels.filter(hotel =>
    hotel.geom &&
    hotel.geom.type === 'Point' &&
    Array.isArray(hotel.geom.coordinates) &&
    hotel.geom.coordinates.length === 2 &&
    typeof hotel.geom.coordinates[0] === 'number' && // longitude
    typeof hotel.geom.coordinates[1] === 'number'    // latitude
  );

  if (hotelsWithCoords.length === 0) {
       return <p className="text-center text-neutral-text-muted-light dark:text-neutral-text-muted-dark">Aucune donnée géographique disponible pour afficher la carte des hôtels.</p>;
  }

  return (
    <div className="my-8 rounded-lg shadow-md overflow-hidden"> {/* Conteneur pour le style */}
      <MapContainer
         center={AGADIR_CENTER}
         zoom={INITIAL_ZOOM}
         scrollWheelZoom={true} // Permet le zoom avec la molette
         style={{ height: '500px', width: '100%' }} // Hauteur et largeur explicites
       >
        <TileLayer
          attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />

        {hotelsWithCoords.map(hotel => {
          // IMPORTANT : Inverser les coordonnées de GeoJSON [lon, lat] vers Leaflet [lat, lon]
          const position = [hotel.geom.coordinates[1], hotel.geom.coordinates[0]];

          return (
            <Marker key={hotel.id} position={position}>
              <Popup>
                <div className="font-body">
                  <strong className="font-semibold block text-base mb-1">{hotel.nom || 'Hôtel'}</strong>
                  <span className="block text-sm text-gray-600">{hotel.classement || 'Non classé'}</span>
                  {/* On pourrait ajouter l'adresse ici si besoin */}
                  {/* <span className="block text-xs mt-1">{hotel.adresse}</span> */}
                </div>
              </Popup>
            </Marker>
          );
        })}
      </MapContainer>
    </div>
  );
}

export default HotelsMap;

--- END OF FILE: src/components/maps/HotelsMap.jsx ---

--- START OF FILE: src/components/maps/JardinsMap.jsx ---
import React from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import L from 'leaflet';

// --- Icon fix (same as before) ---
import iconRetinaUrl from 'leaflet/dist/images/marker-icon-2x.png';
import iconUrl from 'leaflet/dist/images/marker-icon.png';
import shadowUrl from 'leaflet/dist/images/marker-shadow.png';

const DefaultIcon = L.icon({
  iconRetinaUrl,
  iconUrl,
  shadowUrl,
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  tooltipAnchor: [16, -28],
  shadowSize: [41, 41]
});

L.Marker.prototype.options.icon = DefaultIcon;
// --- End icon fix ---

const AGADIR_CENTER = [30.42, -9.59];
const INITIAL_ZOOM = 14;

function JardinsMap({ jardins }) {
  const jardinsWithCoords = jardins.filter(jardin =>
    jardin.geom?.type === 'Point' && Array.isArray(jardin.geom?.coordinates) && jardin.geom.coordinates.length === 2
  );

  if (jardinsWithCoords.length === 0) {
    return <p className="text-center text-neutral-text-muted-light dark:text-neutral-text-muted-dark">Aucune donnée géographique disponible pour la carte des jardins.</p>;
  }

  return (
    <div className="my-6 rounded-lg shadow-md overflow-hidden">
      <MapContainer center={AGADIR_CENTER} zoom={INITIAL_ZOOM} scrollWheelZoom={true} style={{ height: '450px', width: '100%' }}>
        <TileLayer attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors' url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
        {jardinsWithCoords.map(jardin => {
          const position = [jardin.geom.coordinates[1], jardin.geom.coordinates[0]];
          return (
            <Marker key={jardin.id} position={position}>
              <Popup>
                <div className="font-body text-sm">
                  <strong className="font-semibold block text-base mb-1">{jardin.nom || 'Jardin'}</strong>
                  <span className="block text-xs text-gray-600">Quartier: {jardin.quartier || 'N/A'}</span>
                  <span className="block text-xs mt-1">Horaires: {jardin.horaires || 'N/A'}</span>
                </div>
              </Popup>
            </Marker>
          );
        })}
      </MapContainer>
    </div>
  );
}

export default JardinsMap;

--- END OF FILE: src/components/maps/JardinsMap.jsx ---

--- START OF FILE: src/components/ui/Tabs.jsx ---
// src/components/ui/Tabs.jsx
import React, { useState } from 'react';

function Tabs({ children, defaultIndex = 0 }) {
  const [activeIndex, setActiveIndex] = useState(defaultIndex);

  const tabs = React.Children.toArray(children).filter(
    (child) => child.type === Tab
  );
  const panels = React.Children.toArray(children).filter(
    (child) => child.type === TabPanel
  );

  return (
    <div>
      {/* Tab List */}
      <div className="border-b border-neutral-light-sand dark:border-neutral-bg-alt-dark mb-4">
        <nav className="-mb-px flex space-x-6" aria-label="Tabs">
          {tabs.map((tab, index) => (
            <button
              key={tab.props.label}
              onClick={() => setActiveIndex(index)}
              className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors duration-150
                                 ${activeIndex === index
                  ? 'border-primary text-primary dark:border-primary-light dark:text-primary-light'
                  : 'border-transparent text-neutral-text-muted-light dark:text-neutral-text-muted-dark hover:text-neutral-text-light dark:hover:text-neutral-text-dark hover:border-neutral-medium-gray dark:hover:border-neutral-bg-alt-dark'
                }`}
              aria-current={activeIndex === index ? 'page' : undefined}
            >
              {tab.props.icon && <span className="mr-1.5">{tab.props.icon}</span>}
              {tab.props.label}
            </button>
          ))}
        </nav>
      </div>

      {/* Tab Panels */}
      <div>
        {panels.map((panel, index) => (
          <div
            key={index}
            role="tabpanel"
            hidden={activeIndex !== index}
            id={`tabpanel-${index}`}
            aria-labelledby={`tab-${index}`}
          >
            {activeIndex === index ? panel : null}
          </div>
        ))}
      </div>
    </div>
  );
}

// Composant pour définir un onglet (utilisé comme enfant de Tabs)
export function Tab({ label, icon }) {
  return null; // Ce composant ne rend rien directement, il sert à passer les props
}

// Composant pour définir le contenu d'un panneau (utilisé comme enfant de Tabs)
export function TabPanel({ children }) {
  return <div>{children}</div>;
}

export default Tabs;

--- END OF FILE: src/components/ui/Tabs.jsx ---

--- START OF FILE: src/components/visualizations/CoutParQuartierChart.jsx ---
import React from 'react';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';

// Register required Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

function CoutParQuartierChart({ equipements, theme }) {
  // 1. Prepare chart data
  const isDarkMode = theme === 'dark';
  const titleColor = isDarkMode ? '#F8F9FA' : '#303841';
  const textColor = isDarkMode ? '#ADB5BD' : '#8A959E';
  const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
  const tooltipBodyColor = isDarkMode ? '#F8F9FA' : '#303841';
  const tooltipTitleColor = isDarkMode ? '#F8F9FA' : '#303841';
  const barBackgroundColor = isDarkMode ? 'rgba(94, 166, 192, 0.7)' : 'rgba(62, 140, 170, 0.7)';
  const barBorderColor = isDarkMode ? '#65A7C0' : '#3E8CAA';

  const dataParQuartier = React.useMemo(() => {
    console.log("Recalculating chart data...");
    return equipements.reduce((acc, equipement) => {
      const quartier = equipement.quartier || 'Non spécifié';
      const cout = typeof equipement.cout_total === 'number' ? equipement.cout_total : (parseFloat(equipement.cout_total) || 0);

      if (!acc[quartier]) {
        acc[quartier] = 0;
      }
      acc[quartier] += cout;
      return acc;
    }, {});
  }, [equipements]);

  const { sortedQuartiers, sortedCouts } = React.useMemo(() => {
    const sortedEntries = Object.entries(dataParQuartier)
      .sort(([, coutA], [, coutB]) => coutB - coutA);
    const quartiers = sortedEntries.map(([quartier]) => quartier);
    const couts = sortedEntries.map(([, cout]) => cout);
    console.log('Chart data (horizontal):', { labels: quartiers, data: couts });
    return { sortedQuartiers: quartiers, sortedCouts: couts };
  }, [dataParQuartier]);

  // 3. Configure Chart.js data
  const chartData = React.useMemo(() => ({
    labels: sortedQuartiers,
    datasets: [
      {
        label: 'Coût Total (MAD)',
        data: sortedCouts,
        backgroundColor: barBackgroundColor,
        borderColor: barBorderColor,
        borderWidth: 1,
      },
    ],
  }), [sortedQuartiers, sortedCouts, barBackgroundColor, barBorderColor]);

  // 4. Configure chart options
  const chartOptions = React.useMemo(() => ({
    indexAxis: 'y',
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top',
        labels: {
          color: textColor,
          font: {
            family: "'Open Sans', sans-serif",
            size: 14
          }
        }
      },
      title: {
        display: true,
        text: 'Coût Total des Équipements Sportifs par Quartier',
        color: titleColor,
        font: {
          family: "'Playfair Display', serif",
          size: 24
        },
        padding: {
          top: 10,
          bottom: 20
        }
      },
      tooltip: {
        titleColor: tooltipTitleColor,
        bodyColor: tooltipBodyColor,
        backgroundColor: isDarkMode ? 'rgba(48, 56, 65, 0.9)' : 'rgba(255, 255, 255, 0.9)',
        borderColor: isDarkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)',
        borderWidth: 1,
        callbacks: {
          label: function(context) {
            let label = context.dataset.label || '';
            if (label) {
              label += ': ';
            }
            if (context.parsed.x !== null) {
              label += new Intl.NumberFormat('fr-MA', {
                style: 'currency',
                currency: 'MAD',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
              }).format(context.parsed.x);
            }
            return label;
          }
        },
        bodyFont: {
          family: "'Open Sans', sans-serif"
        },
        titleFont: {
          family: "'Open Sans', sans-serif"
        }
      }
    },
    scales: {
      x: {
        beginAtZero: true,
        ticks: {
          color: textColor,
          font: {
            family: "'Open Sans', sans-serif",
            size: 12
          },
          callback: function(value) {
            if (value >= 1000000) return (value / 1000000) + 'M';
            if (value >= 1000) return (value / 1000) + 'k';
            return value;
          }
        },
        grid: {
          color: gridColor,
          borderColor: gridColor,
        },
        border: {
          color: gridColor
        }
      },
      y: {
        ticks: {
          color: textColor,
          font: {
            family: "'Open Sans', sans-serif",
            size: 12
          },
          autoSkip: false
        },
        grid: {
          display: false
        },
        border: {
          color: gridColor
        }
      }
    },
    animation: false,
  }), [isDarkMode, titleColor, textColor, gridColor, tooltipTitleColor, tooltipBodyColor, barBackgroundColor, barBorderColor]);

  // 5. Render the Bar component
  return (
    <div className="my-8 p-4 bg-neutral-surface-light dark:bg-neutral-surface-dark rounded-lg shadow-md relative h-[600px]">
      <Bar options={chartOptions} data={chartData} />
    </div>
  );
}

export default CoutParQuartierChart;
--- END OF FILE: src/components/visualizations/CoutParQuartierChart.jsx ---

--- START OF FILE: src/components/visualizations/HotelsParClassementChart.jsx ---
import React from 'react';
import { Pie } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend, Title } from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend, Title);

function HotelsParClassementChart({ hotels, theme }) {
  // 1. Préparer les données : compter les hôtels par classement
  const dataParClassement = React.useMemo(() => {
    return hotels.reduce((acc, hotel) => {
      const classement = hotel.classement || 'Non spécifié';
      acc[classement] = (acc[classement] || 0) + 1;
      return acc;
    }, {});
  }, [hotels]);

  const labels = Object.keys(dataParClassement);
  const dataCounts = Object.values(dataParClassement);

  // 2. Détecter le mode sombre et définir les couleurs
  const isDarkMode = theme === 'dark';
  const titleColor = isDarkMode ? '#F8F9FA' : '#303841';
  const legendColor = isDarkMode ? '#ADB5BD' : '#8A959E';
  const tooltipBodyColor = isDarkMode ? '#F8F9FA' : '#303841';
  const tooltipTitleColor = isDarkMode ? '#F8F9FA' : '#303841';

  // Palette de couleurs - Utilise des couleurs distinctes
  const backgroundColors = [
    'rgba(62, 140, 170, 0.7)',  // primary
    'rgba(232, 140, 80, 0.7)',  // accent
    'rgba(226, 209, 181, 0.8)', // secondary
    'rgba(94, 166, 192, 0.7)',  // primary-light
    'rgba(242, 170, 122, 0.7)', // accent-light
  ];
  const borderColors = backgroundColors.map(color => color.replace('0.7', '1').replace('0.8', '1'));

  // 3. Configurer les données pour Chart.js
  const chartData = React.useMemo(() => ({
    labels: labels,
    datasets: [
      {
        label: 'Nombre d\'hôtels',
        data: dataCounts,
        backgroundColor: backgroundColors.slice(0, labels.length),
        borderColor: borderColors.slice(0, labels.length),
        borderWidth: 1,
      },
    ],
  }), [labels, dataCounts]);

  // 4. Configurer les options du graphique
  const chartOptions = React.useMemo(() => ({
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'bottom',
        labels: {
          color: legendColor,
          font: {
            family: "'Open Sans', sans-serif",
            size: 14
          },
          boxWidth: 15,
          padding: 20
        }
      },
      title: {
        display: true,
        text: 'Répartition des Hôtels par Classement',
        color: titleColor,
        font: {
          family: "'Playfair Display', serif",
          size: 24
        },
        padding: {
          top: 10,
          bottom: 20
        }
      },
      tooltip: {
        titleColor: tooltipTitleColor,
        bodyColor: tooltipBodyColor,
        backgroundColor: isDarkMode ? 'rgba(48, 56, 65, 0.9)' : 'rgba(255, 255, 255, 0.9)',
        borderColor: isDarkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)',
        borderWidth: 1,
        callbacks: {
          label: function(context) {
            const label = context.label || '';
            const value = context.parsed || 0;
            const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
            const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
            return `${label}: ${value} (${percentage}%)`;
          }
        },
        bodyFont: {
          family: "'Open Sans', sans-serif"
        },
        titleFont: {
          family: "'Open Sans', sans-serif"
        }
      }
    },
  }), [isDarkMode, titleColor, legendColor, tooltipTitleColor, tooltipBodyColor]);

  return (
    <div className="my-8 p-4 bg-neutral-surface-light dark:bg-neutral-surface-dark rounded-lg shadow-md relative h-96 md:h-[450px]">
      <Pie options={chartOptions} data={chartData} />
    </div>
  );
}

export default HotelsParClassementChart;

--- END OF FILE: src/components/visualizations/HotelsParClassementChart.jsx ---

--- START OF FILE: src/index.css ---
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Open+Sans:wght@400;500;600&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html, body {
    padding: 0;
    margin: 0;
    /* Ensure background color applies if needed, and height allows filling */
    height: 100%; 
  }
  /* Vide pour le moment */
}

/* Ajout des utilitaires pour l'ombre du texte */
@layer utilities {
  .text-shadow-sm {
    text-shadow: 1px 1px 3px rgb(0 0 0 / 0.4); /* Ombre douce */
  }
  .text-shadow-md {
    text-shadow: 1px 1px 4px rgb(0 0 0 / 0.5); /* Ombre un peu plus marquée */
  }
   /* Tu peux ajouter d'autres styles ici si besoin */
}

--- END OF FILE: src/index.css ---

--- START OF FILE: src/main.jsx ---
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css' // C'est ici que les directives Tailwind sont injectées
import 'leaflet/dist/leaflet.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
--- END OF FILE: src/main.jsx ---

--- START OF FILE: src/pages/AboutPage.jsx ---
// src/pages/AboutPage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
// --- Importer les icônes ---
import { FiInfo, FiTarget, FiMousePointer, FiAward, FiMail, FiHelpCircle } from 'react-icons/fi';
import { HiOutlineNewspaper, HiOutlineSparkles, HiOutlineUserGroup } from 'react-icons/hi2'; // Utiliser HiOutline pour la licence et autres
import aboutIllustrationUrl from '../assets/about-illustration.png'; // <-- Importer l'illustration

function AboutPage() {
  return (
    <div className="bg-neutral-bg-light dark:bg-neutral-bg-dark text-neutral-text-light dark:text-neutral-text-dark">
      {/* Section Héros */}
      <div className="bg-gradient-to-r from-primary to-primary-dark dark:from-neutral-bg-dark dark:to-neutral-surface-dark py-12 sm:py-16 px-4 sm:px-6 lg:px-8 text-center">
        <h1 className="text-4xl font-heading font-bold text-white mb-4">
          À Propos du Portail Open Data d'Agadir
        </h1>
        <p className="text-lg text-neutral-soft-white max-w-3xl mx-auto font-body">
          Notre engagement pour la transparence, l'innovation et la participation citoyenne à travers le partage des données publiques.
        </p>
      </div>

      {/* Contenu principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 sm:py-16 space-y-16">

        {/* Section 1: Qu'est-ce que l'Open Data ? */}
        <section className="flex flex-col md:flex-row items-center gap-8 md:gap-12"> {/* Augmenté gap */}
          <div className="md:w-2/3">
            <h2 className="flex items-center text-3xl font-heading font-semibold text-primary dark:text-primary-light mb-4">
              <FiInfo className="w-7 h-7 mr-3 flex-shrink-0" /> Qu'est-ce que l'Open Data ? {/* Ajouté flex-shrink-0 */}
            </h2>
            <div className="space-y-4 font-body text-base md:text-lg leading-relaxed">
              <p>
                L'Open Data, ou donnée ouverte, désigne la pratique de rendre accessibles et réutilisables les données produites ou collectées par une organisation (ici, la Commune d'Agadir), sans restriction technique, juridique ou financière.
              </p>
              <p>
                Il s'agit d'une démarche de transparence qui permet à chacun – citoyens, entreprises, chercheurs, développeurs – de consulter, d'analyser et de créer de nouveaux services ou connaissances à partir de ces informations publiques. Les données sont généralement partagées dans des formats standards et sous des licences ouvertes qui en autorisent la libre réutilisation.
              </p>
            </div>
          </div>
          {/* Remplacement de l'icône par l'image importée */}
          <div className="md:w-1/3 text-center flex items-center justify-center mt-6 md:mt-0">
            <img
              src={aboutIllustrationUrl}
              alt="Illustration conceptuelle de données ouvertes connectées"
              className="w-full max-w-[250px] sm:max-w-xs mx-auto rounded-lg object-contain" // Ajusté max-width et ajouté object-contain
            />
          </div>
        </section>

        {/* Section 2: Nos Objectifs */}
         <section className="bg-neutral-bg-alt-light dark:bg-neutral-surface-dark p-8 rounded-lg shadow-lg">
           <h2 className="flex items-center justify-center text-3xl font-heading font-semibold text-primary dark:text-primary-light mb-6 text-center">
             <FiTarget className="w-7 h-7 mr-3" /> Nos Objectifs pour Agadir
           </h2>
           <div className="grid md:grid-cols-3 gap-6 text-center">
             <div className="p-4">
               <FiHelpCircle className="mx-auto text-4xl text-accent dark:text-accent-light mb-3" /> {/* Transparence / Information */}
               <h3 className="text-xl font-semibold font-heading mb-2">Transparence Accrue</h3>
               <p className="text-sm font-body text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                 Rendre compte de l'action municipale et permettre aux citoyens de mieux comprendre le fonctionnement de leur ville.
               </p>
             </div>
             <div className="p-4">
                <HiOutlineSparkles className="mx-auto text-4xl text-accent dark:text-accent-light mb-3" /> {/* Innovation */}
               <h3 className="text-xl font-semibold font-heading mb-2">Innovation & Développement</h3>
               <p className="text-sm font-body text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                 Stimuler la création de nouveaux services, applications et opportunités économiques basés sur les données locales.
               </p>
             </div>
             <div className="p-4">
                <HiOutlineUserGroup className="mx-auto text-4xl text-accent dark:text-accent-light mb-3" /> {/* Participation */}
               <h3 className="text-xl font-semibold font-heading mb-2">Participation Citoyenne</h3>
               <p className="text-sm font-body text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                 Fournir aux habitants les informations nécessaires pour contribuer activement au débat public et à la vie locale.
               </p>
             </div>
           </div>
         </section>

        {/* Section 3: Comment Utiliser ce Portail ? */}
        <section>
          <h2 className="flex items-center text-3xl font-heading font-semibold text-primary dark:text-primary-light mb-6">
            <FiMousePointer className="w-7 h-7 mr-3" /> Comment Utiliser ce Portail ?
          </h2>
          <div className="space-y-4 font-body text-base md:text-lg leading-relaxed">
            <p>
              Ce portail est conçu pour être simple et intuitif. Voici comment vous pouvez interagir avec les données :
            </p>
            <ul className="list-disc list-outside space-y-2 pl-6 marker:text-primary dark:marker:text-primary-light">
              <li>
                <strong>Explorer le Catalogue :</strong> Parcourez la <Link to="/catalogue" className="text-primary dark:text-primary-light font-medium hover:underline">page Catalogue</Link> pour découvrir tous les jeux de données disponibles. Utilisez la barre de recherche pour trouver des données spécifiques par mots-clés.
              </li>
              <li>
                <strong>Consulter les Détails :</strong> Cliquez sur un jeu de données pour accéder à sa page dédiée. Vous y trouverez une description complète, les métadonnées (source, date, licence) et différentes options d'exploration.
              </li>
              <li>
                <strong>Visualiser :</strong> La plupart des jeux de données proposent des visualisations intégrées :
                <ul className='list-[circle] list-outside pl-6 mt-1 space-y-1 text-sm'>
                    <li><span className="font-semibold">Tableau :</span> Consultez les données brutes dans un tableau interactif avec tri et filtres.</li>
                    <li><span className="font-semibold">Carte :</span> Visualisez les données géolocalisées sur une carte interactive (si applicable).</li>
                    <li><span className="font-semibold">Graphique :</span> Explorez des analyses visuelles comme des répartitions ou des évolutions (si applicable).</li>
                </ul>
              </li>
              <li>
                <strong>Télécharger (Prochainement) :</strong> Bientôt, vous pourrez télécharger les données dans différents formats (CSV, JSON) pour une utilisation hors ligne.
              </li>
               <li>
                <strong>API (Prochainement) :</strong> Un accès programmatique via API sera mis à disposition pour les développeurs souhaitant intégrer ces données dans leurs propres applications.
              </li>
            </ul>
          </div>
        </section>

        {/* Section 4: Licence d'Utilisation */}
        <section className="bg-neutral-surface-light dark:bg-neutral-surface-dark p-8 rounded-lg shadow border border-secondary dark:border-neutral-bg-alt-dark">
          <h2 className="flex items-center text-2xl font-heading font-semibold text-primary dark:text-primary-light mb-4">
            <HiOutlineNewspaper className="w-6 h-6 mr-3" /> Licence d'Utilisation
          </h2>
          <div className="space-y-3 font-body text-sm">
            <p>
              Sauf mention contraire spécifiée sur la page du jeu de données, les informations publiées sur ce portail sont mises à disposition sous les termes de la <a href="https://www.etalab.gouv.fr/licence-ouverte-open-licence/" target="_blank" rel="noopener noreferrer" className="font-medium hover:underline text-primary-dark dark:text-secondary-light">Licence Ouverte v2.0 d'Etalab</a>.
            </p>
            <p>
              Cette licence vous autorise à réutiliser librement les données, y compris à des fins commerciales, sous réserve de mentionner la source ("Commune d'Agadir" et la date de mise à jour des données). Nous vous encourageons vivement à partager vos réutilisations !
            </p>
             <p className="text-xs italic text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                Note : Certains jeux de données spécifiques pourraient être soumis à d'autres licences. Vérifiez toujours les métadonnées associées.
             </p>
          </div>
        </section>

        {/* Section 5: Contact & Contribution */}
        <section className="text-center">
          <h2 className="flex items-center justify-center text-3xl font-heading font-semibold text-primary dark:text-primary-light mb-6">
            <FiMail className="w-7 h-7 mr-3" /> Contact & Contribution
          </h2>
          <div className="space-y-4 font-body max-w-2xl mx-auto">
            <p>
              Ce portail est en constante évolution. Vos retours, suggestions ou questions sont précieux !
            </p>
            <p>
              Si vous identifiez une erreur, souhaitez suggérer l'ouverture d'un nouveau jeu de données, ou avez besoin d'aide, n'hésitez pas à nous contacter (méthode de contact à définir).
            </p>
            {/* Placeholder pour un bouton ou lien de contact */}
            <div className="pt-4">
                 <button disabled className="bg-accent hover:bg-accent-dark text-white font-semibold px-6 py-3 rounded-lg transition-colors duration-200 disabled:opacity-60">
                    Formulaire de Contact (Bientôt)
                 </button>
            </div>
          </div>
        </section>

      </div>

        {/* Lien retour Catalogue */}
       <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-12 text-center">
         <Link
            to="/catalogue"
            className="inline-block bg-secondary hover:bg-secondary-light text-neutral-charcoal font-semibold px-6 py-2 rounded-lg transition-colors duration-200 text-sm"
         >
            ← Explorer le Catalogue
         </Link>
       </div>

    </div>
  );
}

export default AboutPage;

--- END OF FILE: src/pages/AboutPage.jsx ---

--- START OF FILE: src/pages/CatalogPage.jsx ---
import React, { useState, useMemo } from 'react';
import { Link } from 'react-router-dom'; // Import Link
import DatasetCardCatalog from '../components/datasets/DatasetCardCatalog'; // Importer la carte catalogue

// Données simulées pour les datasets (sera remplacé par des données dynamiques plus tard)
// Ces métadonnées sont juste des exemples pour remplir les cartes
const allDatasets = [
  {
    id: 1,
    title: 'Équipements Sportifs',
    description: 'Liste géolocalisée des infrastructures sportives publiques de la ville, incluant leur type et coût.',
    theme: 'Infrastructures',
    keywords: ['sport', 'stade', 'piscine', 'terrain', 'public'],
    lastUpdated: '2024-03-15',
    views: { table: true, map: true, chart: true }, // Indique les vues disponibles
    linkTo: '/equipements',
  },
  {
    id: 2,
    title: 'Hôtels Classés',
    description: 'Répertoire des hôtels classés sur le territoire d\'Agadir, avec leur classement, adresse et coordonnées.',
    theme: 'Tourisme',
    keywords: ['hébergement', 'hôtel', 'classement', 'tourisme'],
    lastUpdated: '2024-04-01',
    views: { table: true, map: true, chart: true },
    linkTo: '/hotels',
  },
  {
    id: 3,
    title: 'Jardins Publics',
    description: 'Localisation et informations sur les parcs et jardins publics accessibles à Agadir.',
    theme: 'Environnement',
    keywords: ['parc', 'jardin', 'vert', 'espace public', 'nature'],
    lastUpdated: '2024-02-20',
    views: { table: false, map: true, chart: false }, // Note: table=false, chart=false
    linkTo: '/jardins',
  },
  {
    id: 4,
    title: 'Lignes de Bus Urbain',
    description: 'Tracés et détails des lignes du réseau de bus urbain Alsa Agadir.',
    theme: 'Transport',
    keywords: ['bus', 'transport', 'mobilité', 'Alsa', 'urbain'],
    lastUpdated: '2023-12-10',
    views: { table: true, map: false, chart: false }, // Note: map=false, chart=false
    linkTo: '/lignes-bus',
  },
  // Ajouter d'autres datasets ici si nécessaire
];

function CatalogPage() {
  const [searchTerm, setSearchTerm] = useState('');

  // Filtrage basique côté client basé sur le terme de recherche
  const filteredDatasets = useMemo(() => {
    if (!searchTerm) {
      return allDatasets;
    }
    const lowerSearchTerm = searchTerm.toLowerCase();
    return allDatasets.filter(dataset =>
      dataset.title.toLowerCase().includes(lowerSearchTerm) ||
      dataset.description.toLowerCase().includes(lowerSearchTerm) ||
      (dataset.keywords && dataset.keywords.some(kw => kw.toLowerCase().includes(lowerSearchTerm)))
    );
  }, [searchTerm]);

  return (
    <div className="w-full px-4 sm:px-6 lg:px-8 py-8">
      <h2 className="text-3xl font-heading font-bold text-neutral-text-light dark:text-neutral-text-dark mb-6">
        Catalogue des Jeux de Données
      </h2>

      {/* Barre de recherche */}
      <div className="mb-8">
        <label htmlFor="search-catalog" className="sr-only">Rechercher dans le catalogue</label>
        <input
          type="search"
          id="search-catalog"
          placeholder="Rechercher par titre, description ou mot-clé..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full p-3 rounded-md border bg-neutral-surface-light dark:bg-neutral-surface-dark border-neutral-medium-gray dark:border-neutral-bg-alt-dark focus:ring-primary focus:border-primary text-base text-neutral-text-light dark:text-neutral-text-dark placeholder-neutral-text-muted-light dark:placeholder-neutral-text-muted-dark"
        />
      </div>

      {/* Affichage du nombre de résultats */}
       <p className="text-sm text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-6 italic">
         {filteredDatasets.length} jeu(x) de données trouvé(s).
       </p>

      {/* Grille des datasets */}
      {filteredDatasets.length > 0 ? (
         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
           {filteredDatasets.map((dataset) => (
             <DatasetCardCatalog
               key={dataset.id}
               title={dataset.title}
               description={dataset.description}
               theme={dataset.theme}
               keywords={dataset.keywords}
               lastUpdated={dataset.lastUpdated}
               views={dataset.views}
               linkTo={dataset.linkTo}
             />
           ))}
         </div>
       ) : (
         <div className="text-center py-10">
            <p className="text-lg font-medium text-neutral-text-light dark:text-neutral-text-dark">
               Aucun jeu de données ne correspond à votre recherche.
            </p>
         </div>
       )}

       {/* Lien retour accueil */}
       <div className="mt-10 text-center">
         <Link
            to="/"
            className="inline-block bg-secondary hover:bg-secondary-light text-neutral-charcoal font-semibold px-6 py-2 rounded-lg transition-colors duration-200"
         >
            Retour à l'accueil
         </Link>
       </div>
    </div>
  );
}

export default CatalogPage;

--- END OF FILE: src/pages/CatalogPage.jsx ---

--- START OF FILE: src/pages/EquipementsPage.jsx ---
// src/pages/EquipementsPage.jsx
import { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { fetchEquipements } from '../services/equipementService';
import MetadataBlock from '../components/datasets/MetadataBlock';
import CoutParQuartierChart from '../components/visualizations/CoutParQuartierChart';
import EquipementsMap from '../components/maps/EquipementsMap';
import Tabs, { Tab, TabPanel } from '../components/ui/Tabs'; // Importer le nouveau composant Tabs
import { FiTable, FiMap, FiBarChart2, FiDownload } from 'react-icons/fi'; // Add FiDownload icon
import equipementsBannerUrl from '../assets/equipements-banner.jpg'; // <-- Importer la bannière
// --- Import Export Utils ---
import { exportToCsv, exportToXlsx, exportToPdf } from '../utils/exportUtils'; // Adjust path if needed

function EquipementsPage({ theme }) {
  // --- États (restent les mêmes) ---
  const [equipements, setEquipements] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [chartKey, setChartKey] = useState(0); // Pour forcer la re-render du chart si besoin
  const [sortConfig, setSortConfig] = useState({ key: 'projet_nom', direction: 'ascending' });
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedQuartier, setSelectedQuartier] = useState('');
  const [minCost, setMinCost] = useState('');
  const [maxCost, setMaxCost] = useState('');

  // --- useEffect pour charger les données (reste le même) ---
  useEffect(() => {
    async function loadEquipements() {
      setIsLoading(true);
      setError(null);
      const { data, error: fetchError } = await fetchEquipements();
      if (fetchError) {
        setError(fetchError.message);
        setEquipements([]);
      } else {
        setEquipements(data || []);
        setChartKey(prevKey => prevKey + 1); // Trigger chart update if needed
      }
      setIsLoading(false);
    }
    loadEquipements();
  }, []);

  // --- Options de quartier (reste le même) ---
  const quartierOptions = useMemo(() => {
    const quartiers = new Set(equipements.map(e => e.quartier || 'Non spécifié'));
    return ['', ...Array.from(quartiers).sort((a, b) => a.localeCompare(b, 'fr', { sensitivity: 'base' }))];
  }, [equipements]);

  // --- Logique de filtrage et tri (reste la même) ---
  const filteredAndSortedEquipements = useMemo(() => {
    const minCostValue = minCost === '' ? null : parseFloat(minCost);
    const maxCostValue = maxCost === '' ? null : parseFloat(maxCost);
    let filtered = equipements.filter(equip => {
      const nameMatch = equip.projet_nom && equip.projet_nom.toLowerCase().includes(searchTerm.toLowerCase());
      const actualQuartier = equip.quartier || 'Non spécifié';
      const quartierMatch = selectedQuartier === '' || actualQuartier === selectedQuartier;
      const cost = typeof equip.cout_total === 'number' ? equip.cout_total : null;
      const minCostMatch = minCostValue === null || isNaN(minCostValue) || (cost !== null && cost >= minCostValue);
      const maxCostMatch = maxCostValue === null || isNaN(maxCostValue) || (cost !== null && cost <= maxCostValue);
      return nameMatch && quartierMatch && minCostMatch && maxCostMatch;
    });
    if (sortConfig.key !== null) {
      filtered.sort((a, b) => {
        const valA = a[sortConfig.key]; const valB = b[sortConfig.key];
        let comparison = 0;
        if (valA === null || valA === undefined) comparison = -1;
        else if (valB === null || valB === undefined) comparison = 1;
        else if (typeof valA === 'number' && typeof valB === 'number') { comparison = valA - valB; }
        else if (typeof valA === 'string' && typeof valB === 'string') { comparison = valA.localeCompare(valB, 'fr', { sensitivity: 'base' }); }
        else { comparison = String(valA).localeCompare(String(valB), 'fr', { sensitivity: 'base' }); }
        return sortConfig.direction === 'descending' ? (comparison * -1) : comparison;
      });
    }
    return filtered;
  }, [equipements, searchTerm, selectedQuartier, minCost, maxCost, sortConfig]);

  // --- Fonctions de tri (restent les mêmes) ---
  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') { direction = 'descending'; }
    setSortConfig({ key, direction });
  };
  const getSortIcon = (columnKey) => {
    if (sortConfig.key !== columnKey) { return <span className="opacity-30 ml-1">↕</span>; }
    return sortConfig.direction === 'ascending' ? <span className="opacity-80 ml-1">▲</span> : <span className="opacity-80 ml-1">▼</span>;
  };

  // --- Rendu des filtres (sera utilisé dans la Sidebar) ---
  const renderFilters = () => (
    <div className="p-4 space-y-4">
       <h3 className="text-lg font-semibold font-heading text-neutral-text-light dark:text-neutral-text-dark border-b pb-2 mb-3 border-neutral-light-sand dark:border-neutral-bg-alt-dark">
         Filtres
       </h3>
      <div>
        <label htmlFor="search-equipement" className="block text-sm font-medium text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-1">
          Rechercher par nom :
        </label>
        <input type="text" id="search-equipement" placeholder="Nom..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full p-2 rounded border bg-neutral-bg-light dark:bg-neutral-bg-dark border-neutral-medium-gray dark:border-neutral-bg-alt-dark focus:ring-primary focus:border-primary text-sm text-neutral-text-light dark:text-neutral-text-dark placeholder-neutral-text-muted-light dark:placeholder-neutral-text-muted-dark"/>
      </div>
      <div>
        <label htmlFor="filter-quartier" className="block text-sm font-medium text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-1">
          Filtrer par quartier :
        </label>
        <select id="filter-quartier" value={selectedQuartier} onChange={(e) => setSelectedQuartier(e.target.value)} className="w-full p-2 rounded border bg-neutral-bg-light dark:bg-neutral-bg-dark border-neutral-medium-gray dark:border-neutral-bg-alt-dark focus:ring-primary focus:border-primary text-sm text-neutral-text-light dark:text-neutral-text-dark">
          {quartierOptions.map(quartier => (
            <option key={quartier} value={quartier}>{quartier === '' ? 'Tous les quartiers' : quartier}</option>
          ))}
        </select>
      </div>
      <div>
        <label className="block text-sm font-medium text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-1">
          Filtrer par coût (MAD) :
        </label>
        <div className="flex space-x-2">
          <input type="number" id="filter-min-cost" placeholder="Min" min="0" value={minCost} onChange={(e) => setMinCost(e.target.value)} className="w-1/2 p-2 rounded border bg-neutral-bg-light dark:bg-neutral-bg-dark border-neutral-medium-gray dark:border-neutral-bg-alt-dark focus:ring-primary focus:border-primary text-sm text-neutral-text-light dark:text-neutral-text-dark placeholder-neutral-text-muted-light dark:placeholder-neutral-text-muted-dark"/>
          <input type="number" id="filter-max-cost" placeholder="Max" min="0" value={maxCost} onChange={(e) => setMaxCost(e.target.value)} className="w-1/2 p-2 rounded border bg-neutral-bg-light dark:bg-neutral-bg-dark border-neutral-medium-gray dark:border-neutral-bg-alt-dark focus:ring-primary focus:border-primary text-sm text-neutral-text-light dark:text-neutral-text-dark placeholder-neutral-text-muted-light dark:placeholder-neutral-text-muted-dark"/>
        </div>
      </div>
      <div className="pt-3 text-right">
        <button onClick={() => { setSearchTerm(''); setSelectedQuartier(''); setMinCost(''); setMaxCost(''); setSortConfig({ key: 'projet_nom', direction: 'ascending' }); }} disabled={!searchTerm && !selectedQuartier && !minCost && !maxCost} className="text-xs text-secondary dark:text-secondary-light hover:underline font-medium disabled:opacity-50 disabled:cursor-not-allowed">
          Réinitialiser
        </button>
      </div>
    </div>
  );

  // --- Define Headers for Export ---
  // Keys must match the keys in your 'equipements' data objects
  const exportHeaders = ['projet_nom', 'quartier', 'composantes', 'cout_total'];
  // User-friendly titles for the columns
  const exportHeaderTitles = ['Nom du Projet', 'Quartier', 'Composantes', 'Coût Total (MAD)'];

  // --- Rendu du tableau (modified to be simpler here, focus on export) ---
  const renderTable = () => (
    <div className="overflow-x-auto bg-neutral-surface-light dark:bg-neutral-surface-dark rounded-lg shadow-md">
      <table className="min-w-full divide-y divide-neutral-light-sand dark:divide-neutral-bg-alt-dark table-fixed">
        <thead className="bg-neutral-light-sand dark:bg-neutral-bg-alt-dark">
          <tr>
            <th scope="col" className="py-3 px-4 text-left text-xs font-medium font-heading text-neutral-text-light dark:text-neutral-text-muted-dark uppercase tracking-wider w-[30%] sm:w-[25%] cursor-pointer hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark" onClick={() => requestSort('projet_nom')}>Nom {getSortIcon('projet_nom')}</th>
            <th scope="col" className="py-3 px-4 text-left text-xs font-medium font-heading text-neutral-text-light dark:text-neutral-text-muted-dark uppercase tracking-wider w-[15%] sm:w-[15%] cursor-pointer hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark" onClick={() => requestSort('quartier')}>Quartier {getSortIcon('quartier')}</th>
            <th scope="col" className="py-3 px-4 text-left text-xs font-medium font-heading text-neutral-text-light dark:text-neutral-text-muted-dark uppercase tracking-wider w-[35%] sm:w-[40%]">Composantes</th>
            <th scope="col" className="py-3 px-4 text-right text-xs font-medium font-heading text-neutral-text-light dark:text-neutral-text-muted-dark uppercase tracking-wider w-[20%] sm:w-[20%] cursor-pointer hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark" onClick={() => requestSort('cout_total')}>Coût (MAD) {getSortIcon('cout_total')}</th>
          </tr>
        </thead>
        <tbody className="divide-y divide-neutral-bg-alt-light dark:divide-neutral-bg-alt-dark">
          {filteredAndSortedEquipements.map((equipement) => (
            <tr key={equipement.id} className="hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark transition-colors duration-150">
              <td className="py-3 px-4 text-sm font-medium text-neutral-text-light dark:text-neutral-text-dark break-words">{equipement.projet_nom || 'N/A'}</td>
              <td className="py-3 px-4 text-sm text-neutral-text-muted-light dark:text-neutral-text-muted-dark break-words">{equipement.quartier || 'N/A'}</td>
              <td className="py-3 px-4 text-sm text-neutral-text-muted-light dark:text-neutral-text-muted-dark break-words">
                {equipement.composantes ? (equipement.composantes.split('\n').map((line, index) => (<span key={index} className="block">{line.trim()}</span>))) : 'N/A'}
              </td>
              <td className="py-3 px-4 text-sm text-neutral-text-muted-light dark:text-neutral-text-muted-dark text-right">
                {typeof equipement.cout_total === 'number' ? equipement.cout_total.toLocaleString('fr-MA', { style: 'currency', currency: 'MAD', minimumFractionDigits: 0, maximumFractionDigits: 0 }) : equipement.cout_total || 'N/A'}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );

  // --- Structure Principale de la Page ---
  return (
    <div className="max-w-full mx-auto px-0 sm:px-0 lg:px-0 py-8 flex"> {/* Full width, flex container */}

      {/* Sidebar (Gauche) */}
      <aside className="w-1/4 xl:w-1/5 hidden md:block border-r border-neutral-light-sand dark:border-neutral-bg-alt-dark pr-6">
        {/* Contenu Sidebar */}
        {isLoading ? (
          <div className="p-4 text-center">Chargement des filtres...</div>
        ) : error ? (
           <div className="p-4 text-center text-red-500">Erreur filtres</div>
        ) : (
            <>
                <div className="sticky top-4"> {/* Make filters sticky */}
                    {renderFilters()}
                     <p className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark p-4 italic">
                        {filteredAndSortedEquipements.length} équipement(s) affiché(s).
                    </p>
                </div>
            </>
        )}
      </aside>

      {/* Main Content (Droite) */}
      <div className="w-full md:w-3/4 xl:w-4/5 md:pl-6">

        {/* Metadonnées */}
        <MetadataBlock
          title="Équipements Sportifs"
          description="Liste géolocalisée des infrastructures sportives publiques de la ville, incluant leur type et coût estimé."
          source="Commune d'Agadir - Service des Sports"
          dateMaj="2024-03-15"
          licence="Licence Ouverte v2.0"
          tags={['sport', 'stade', 'piscine', 'terrain', 'public', 'infrastructure']}
        />

        {/* Bannière Image */}
        <div className="my-6 rounded-lg overflow-hidden shadow-md"> {/* Ajout marge et style */}
          <img
              src={equipementsBannerUrl}
              alt="Bannière équipements sportifs Agadir"
              className="w-full h-40 sm:h-56 object-cover" // Ajuster hauteur si besoin
          />
        </div>

        {/* Affichage conditionnel pendant le chargement ou erreur */}
        {isLoading ? (
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
          </div>
        ) : error ? (
          <div className="text-center p-6 bg-red-100 dark:bg-red-900/30 border border-red-300 dark:border-red-700 rounded-lg">
            <p className="text-red-700 dark:text-red-300 text-lg font-body">Erreur lors du chargement: {error}</p>
            <button onClick={() => window.location.reload()} className="mt-4 inline-block bg-accent hover:bg-accent-dark text-white font-semibold px-6 py-2 rounded-lg transition-colors duration-200">
              Réessayer
            </button>
          </div>
        ) : !equipements || equipements.length === 0 ? (
             <div className="text-center py-10 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                Aucune donnée d'équipement disponible pour le moment.
             </div>
        ) : (
          <>
            {/* Section pour les filtres sur mobile/tablette (masquée sur md et plus) */}
            <details className="md:hidden mb-4 p-4 bg-neutral-bg-alt-light dark:bg-neutral-surface-dark rounded shadow">
                 <summary className="cursor-pointer font-semibold text-neutral-text-light dark:text-neutral-text-dark">Afficher/Masquer les Filtres</summary>
                 {renderFilters()}
                 <p className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark p-4 italic">
                    {filteredAndSortedEquipements.length} équipement(s) affiché(s).
                 </p>
             </details>

            {/* Onglets pour les visualisations */}
            <Tabs>
              {/* Définition des onglets avec icônes */}
              <Tab label="Tableau" icon={<FiTable className="inline-block w-4 h-4 mr-1" />} />
              <Tab label="Carte" icon={<FiMap className="inline-block w-4 h-4 mr-1" />} />
              <Tab label="Analyse" icon={<FiBarChart2 className="inline-block w-4 h-4 mr-1" />} /> {/* Simplifié le label */}

              {/* Panneau 1: Tableau */}
              <TabPanel>
                <div className="my-4 flex flex-wrap gap-2 justify-end">
                  <button
                    onClick={() => exportToCsv(filteredAndSortedEquipements, exportHeaders, exportHeaderTitles, 'equipements_agadir.csv')}
                    className="px-3 py-1.5 text-xs font-medium text-white bg-primary dark:bg-primary-dark rounded shadow hover:bg-primary-light dark:hover:bg-primary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition duration-150 ease-in-out disabled:opacity-50"
                    disabled={filteredAndSortedEquipements.length === 0}
                    title="Exporter en CSV"
                  >
                    <FiDownload className="inline-block w-3 h-3 mr-1" /> CSV
                  </button>
                  <button
                    onClick={() => exportToXlsx(filteredAndSortedEquipements, exportHeaders, exportHeaderTitles, 'equipements_agadir.xlsx', 'Équipements')}
                    className="px-3 py-1.5 text-xs font-medium text-white bg-green-600 dark:bg-green-700 rounded shadow hover:bg-green-500 dark:hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-600 transition duration-150 ease-in-out disabled:opacity-50"
                    disabled={filteredAndSortedEquipements.length === 0}
                    title="Exporter en Excel"
                  >
                    <FiDownload className="inline-block w-3 h-3 mr-1" /> XLSX
                  </button>
                  <button
                    onClick={() => exportToPdf(filteredAndSortedEquipements, exportHeaders, exportHeaderTitles, 'equipements_agadir.pdf', 'Liste des Équipements Sportifs - Agadir')}
                    className="px-3 py-1.5 text-xs font-medium text-white bg-red-600 dark:bg-red-700 rounded shadow hover:bg-red-500 dark:hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-600 transition duration-150 ease-in-out disabled:opacity-50"
                    disabled={filteredAndSortedEquipements.length === 0}
                    title="Exporter en PDF"
                  >
                    <FiDownload className="inline-block w-3 h-3 mr-1" /> PDF
                  </button>
                </div>
                {filteredAndSortedEquipements.length > 0 ? (
                  renderTable()
                ) : (
                  <p className="text-center py-10 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                    Aucun équipement ne correspond aux filtres sélectionnés.
                  </p>
                )}
              </TabPanel>

              {/* Panneau 2: Carte */}
              <TabPanel>
                {filteredAndSortedEquipements.length > 0 ? (
                  <EquipementsMap equipements={filteredAndSortedEquipements} />
                ) : (
                  <p className="text-center py-10 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                    Aucun équipement à afficher sur la carte avec les filtres actuels.
                  </p>
                )}
              </TabPanel>

              {/* Panneau 3: Graphique */}
              <TabPanel>
                 <p className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-2 italic">
                    Note : Le graphique montre le coût total par quartier pour *tous* les équipements, indépendamment des filtres de coût appliqués.
                 </p>
                <CoutParQuartierChart key={chartKey} equipements={equipements} theme={theme} />
              </TabPanel>
            </Tabs>
          </>
        )}

        {/* Lien Retour Accueil */}
        <div className="mt-10 text-left"> {/* Changé pour text-left */}
            <Link to="/catalogue" className="inline-block bg-secondary hover:bg-secondary-light text-neutral-charcoal font-semibold px-6 py-2 rounded-lg transition-colors duration-200">
                ← Retour au Catalogue
            </Link>
        </div>
      </div>
    </div>
  );
}

export default EquipementsPage;

--- END OF FILE: src/pages/EquipementsPage.jsx ---

--- START OF FILE: src/pages/HomePage.jsx ---
import React from 'react';
import { Link } from 'react-router-dom';
import DatasetCardHome from '../components/datasets/DatasetCardHome'; 
// --- Importer les icônes ---
import { FiDatabase, FiMapPin, FiHome, FiCompass, FiBarChart2, FiInfo, FiLayers, FiUsers, FiEye, FiFileText } from 'react-icons/fi';
import { HiOutlineBuildingOffice2, HiOutlineSparkles, HiOutlineUserGroup, HiOutlineGlobeAlt } from "react-icons/hi2"; // Heroicons v2 Outline

// --- Importer l'image de fond ---
import heroImageUrl from '../assets/agadir-hero.jpg'; // Chemin vers ton image

// Données simulées pour les datasets affichés sur l'accueil
const featuredDatasets = [
  {
    id: 1,
    title: 'Équipements Sportifs',
    icon: <FiCompass />, // Icône pour sport/exploration
    linkTo: '/equipements',
  },
  {
    id: 2,
    title: 'Hôtels Classés',
    icon: <HiOutlineBuildingOffice2 />, // Icône bâtiment/hôtel
    linkTo: '/hotels',
  },
  {
    id: 3,
    title: 'Jardins Publics',
    icon: <FiMapPin />, // Icône localisation/parc
    linkTo: '/jardins',
  },
  {
    id: 4,
    title: 'Lignes de Bus',
    icon: <FiLayers />, // Icône pour réseau/lignes
    linkTo: '/lignes-bus',
  },
  // On pourrait ajouter d'autres datasets ici à l'avenir
];

// Données simulées pour les thèmes
const themes = [
    { id: 'infra', name: 'Infrastructures', icon: <FiHome />, link: '/catalogue?theme=infra' },
    { id: 'tourisme', name: 'Tourisme', icon: <HiOutlineGlobeAlt />, link: '/catalogue?theme=tourisme' },
    { id: 'environnement', name: 'Environnement', icon: <FiMapPin />, link: '/catalogue?theme=env' }, // Réutiliser FiMapPin
    { id: 'transport', name: 'Transport', icon: <FiCompass />, link: '/catalogue?theme=transport' }, // Réutiliser FiCompass
]

function HomePage() {
  return (
    <div className="w-full text-neutral-text-light dark:text-neutral-text-dark">
      {/* Section Héros */}
      <section
        className="relative bg-cover bg-center py-20 sm:py-28 px-4 sm:px-6 lg:px-8 text-center text-white overflow-hidden" // Ajout de classes pour l'image
        style={{ backgroundImage: `url(${heroImageUrl})` }} // Image de fond
      >
        {/* Overlay semi-transparent pour améliorer la lisibilité du texte */}
        <div className="absolute inset-0 bg-gradient-to-b from-black/50 via-black/30 to-black/60"></div>

         {/* Contenu au-dessus de l'overlay */}
        <div className="relative z-10">
          <h1 className="text-4xl md:text-5xl font-heading font-bold mb-4 text-shadow-md"> {/* Ajout text-shadow */}
            Portail Open Data d'Agadir
          </h1>
          <p className="text-xl md:text-2xl font-body mb-8 max-w-3xl mx-auto text-shadow-sm"> {/* Ajout text-shadow */}
            Explorez, visualisez et téléchargez les données ouvertes mises à disposition par la Commune d'Agadir.
          </p>
          {/* Barre de recherche */}
          <div className="max-w-xl mx-auto">
            <input
              type="search"
              placeholder="Rechercher un jeu de données..."
              disabled
              className="w-full p-3 rounded-md border border-gray-300 dark:border-neutral-bg-alt-dark bg-white/90 dark:bg-neutral-surface-dark/90 text-neutral-text-light dark:text-neutral-text-dark placeholder-neutral-text-muted-light dark:placeholder-neutral-text-muted-dark focus:outline-none focus:ring-2 focus:ring-primary-light dark:focus:ring-accent shadow-lg" // Ajout shadow, ajustement opacité fond
              aria-label="Rechercher un jeu de données (désactivé)"
            />
            <p className="text-xs mt-2 text-white/80">(Recherche globale bientôt disponible)</p>
          </div>
        </div>
      </section>

      {/* Section Chiffres Clés (Simulée) */}
      <section className="py-12 bg-neutral-bg-alt-light dark:bg-neutral-bg-dark px-4 sm:px-6 lg:px-8">
         <h2 className="text-2xl font-heading font-semibold text-center mb-8 text-neutral-text-light dark:text-neutral-text-dark">
           Le portail en chiffres
         </h2>
         <div className="max-w-4xl mx-auto grid grid-cols-2 md:grid-cols-4 gap-6 text-center">
           <div className="p-4 bg-neutral-surface-light dark:bg-neutral-surface-dark rounded-lg shadow">
             <FiDatabase className="mx-auto text-3xl text-primary dark:text-primary-light mb-1" />
             <div className="text-xl font-bold text-neutral-text-light dark:text-neutral-text-dark">4</div>
             <div className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark mt-1 uppercase tracking-wider">Jeux de données</div>
           </div>
           <div className="p-4 bg-neutral-surface-light dark:bg-neutral-surface-dark rounded-lg shadow">
             <FiLayers className="mx-auto text-3xl text-primary dark:text-primary-light mb-1" />
             <div className="text-xl font-bold text-neutral-text-light dark:text-neutral-text-dark">{themes.length}</div>
             <div className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark mt-1 uppercase tracking-wider">Thématiques</div>
           </div>
           <div className="p-4 bg-neutral-surface-light dark:bg-neutral-surface-dark rounded-lg shadow">
             <FiEye className="mx-auto text-3xl text-primary dark:text-primary-light mb-1" />
             <div className="text-xl font-bold text-neutral-text-light dark:text-neutral-text-dark">10k+</div>
             <div className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark mt-1 uppercase tracking-wider">Vues (Simulé)</div>
           </div>
            <div className="p-4 bg-neutral-surface-light dark:bg-neutral-surface-dark rounded-lg shadow">
             <FiFileText className="mx-auto text-3xl text-primary dark:text-primary-light mb-1" />
             <div className="text-xl font-bold text-neutral-text-light dark:text-neutral-text-dark">1</div>
             <div className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark mt-1 uppercase tracking-wider">Source</div>
           </div>
         </div>
       </section>

      {/* Section Catalogue par Thème (FOND MODIFIÉ + styles carte ajustés) */}
      <section className="py-12 px-4 sm:px-6 lg:px-8 bg-neutral-bg-alt-light dark:bg-neutral-surface-dark">
         <h2 className="text-2xl font-heading font-semibold text-center mb-8 text-neutral-text-light dark:text-neutral-text-dark">
           Explorer par Thème
         </h2>
         <div className="max-w-5xl mx-auto grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6">
             {themes.map((theme) => (
                 <Link
                     key={theme.id}
                     to={'/catalogue'}
                     className="block p-6 text-center bg-white dark:bg-neutral-bg-dark rounded-lg shadow hover:shadow-lg transition-shadow duration-200 border border-neutral-light-sand dark:border-neutral-bg-alt-dark"
                     aria-label={`Explorer le thème ${theme.name}`}
                 >
                     {/* Icône plus grande ici */}
                     <div className="text-4xl mb-3 text-primary dark:text-primary-light">{theme.icon}</div>
                     <div className="font-semibold font-body text-neutral-text-light dark:text-neutral-text-dark">{theme.name}</div>
                     {/* On pourrait ajouter le nombre de datasets par thème plus tard */}
                 </Link>
             ))}
         </div>
         <div className="text-center mt-8">
             <Link to="/catalogue" className="inline-block bg-primary hover:bg-primary-light text-white font-semibold px-6 py-2 rounded-lg transition-colors duration-200">
                 Voir tout le catalogue
             </Link>
         </div>
      </section>


      {/* Section Nos Jeux de Données */}
      <section className="py-12 bg-neutral-bg-alt-light dark:bg-neutral-bg-dark px-4 sm:px-6 lg:px-8">
        <h2 className="text-2xl font-heading font-semibold text-center mb-8 text-neutral-text-light dark:text-neutral-text-dark">
          Nos Jeux de Données en Vedette
        </h2>
        <div className="max-w-6xl mx-auto grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {featuredDatasets.map((dataset) => (
            <DatasetCardHome
              key={dataset.id}
              title={dataset.title}
              icon={dataset.icon}
              linkTo={dataset.linkTo}
            />
          ))}
        </div>
      </section>

    </div>
  );
}

export default HomePage;

--- END OF FILE: src/pages/HomePage.jsx ---

--- START OF FILE: src/pages/HotelsPage.jsx ---
import { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { fetchHotels } from '../services/hotelService';
import HotelsParClassementChart from '../components/visualizations/HotelsParClassementChart';
import HotelsMap from '../components/maps/HotelsMap';
import MetadataBlock from '../components/datasets/MetadataBlock';
import Tabs, { Tab, TabPanel } from '../components/ui/Tabs'; // Importer Tabs
import { FiTable, FiMap, FiBarChart2, FiDownload } from 'react-icons/fi'; // Importer les icônes + FiDownload
import hotelsBannerUrl from '../assets/hotels-banner.jpg'; // Importer la bannière
// --- Import Export Utils ---
import { exportToCsv, exportToXlsx, exportToPdf } from '../utils/exportUtils';

function HotelsPage({ theme }) {
  // --- États --- 
  const [hotels, setHotels] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedClassement, setSelectedClassement] = useState('');
  const [sortConfig, setSortConfig] = useState({ key: 'nom', direction: 'ascending' });

  // --- Chargement des données --- 
  useEffect(() => {
    async function loadHotels() {
      setIsLoading(true);
      setError(null);
      const { data, error: fetchError } = await fetchHotels();
      if (fetchError) {
        setError(fetchError.message);
        setHotels([]);
      } else {
        setHotels(data || []);
      }
      setIsLoading(false);
    }
    loadHotels();
  }, []);

  // --- Options de classement --- 
  const classementOptions = useMemo(() => {
    const classements = new Set(hotels.map(h => h.classement || 'Non spécifié'));
    // Tri spécifique pour les étoiles (simple pour l'instant)
    return ['', ...Array.from(classements).sort((a, b) => {
      if (a === 'Non spécifié') return 1;
      if (b === 'Non spécifié') return -1;
      return a.localeCompare(b, undefined, { numeric: true });
    })];
  }, [hotels]);

  // --- Logique de filtrage et tri --- 
  const sortedAndFilteredHotels = useMemo(() => {
    let filtered = hotels.filter(hotel => {
      const nameMatch = hotel.nom && hotel.nom.toLowerCase().includes(searchTerm.toLowerCase());
      const actualClassement = hotel.classement || 'Non spécifié';
      const classementMatch = selectedClassement === '' || actualClassement === selectedClassement;
      return nameMatch && classementMatch;
    });

    if (sortConfig.key !== null) {
      filtered.sort((a, b) => {
        const valA = a[sortConfig.key] || '';
        const valB = b[sortConfig.key] || '';
        let comparison = 0;
        if (typeof valA === 'string' && typeof valB === 'string') {
          comparison = valA.localeCompare(valB, 'fr', { sensitivity: 'base' });
        } else {
          if (valA < valB) { comparison = -1; }
          if (valA > valB) { comparison = 1; }
        }
        return sortConfig.direction === 'descending' ? (comparison * -1) : comparison;
      });
    }
    return filtered;
  }, [hotels, searchTerm, selectedClassement, sortConfig]);

  // --- Fonctions de tri --- 
  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };
  const getSortIcon = (columnKey) => {
    if (sortConfig.key !== columnKey) { return <span className="opacity-30 ml-1">↕</span>; }
    return sortConfig.direction === 'ascending' ? <span className="opacity-80 ml-1">▲</span> : <span className="opacity-80 ml-1">▼</span>;
  };

  // --- Rendu des filtres (pour Sidebar et mobile) --- 
  const renderFilters = () => (
    <div className="p-4 space-y-4">
      <h3 className="text-lg font-semibold font-heading text-neutral-text-light dark:text-neutral-text-dark border-b pb-2 mb-3 border-neutral-light-sand dark:border-neutral-bg-alt-dark">
        Filtres
      </h3>
      <div>
        <label htmlFor="search-hotel" className="block text-sm font-medium text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-1">
          Rechercher par nom :
        </label>
        <input
          type="text"
          id="search-hotel"
          placeholder="Nom de l'hôtel..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full p-2 rounded border bg-neutral-bg-light dark:bg-neutral-bg-dark border-neutral-medium-gray dark:border-neutral-bg-alt-dark focus:ring-primary focus:border-primary text-sm text-neutral-text-light dark:text-neutral-text-dark placeholder-neutral-text-muted-light dark:placeholder-neutral-text-muted-dark"
        />
      </div>
      <div>
        <label htmlFor="filter-classement" className="block text-sm font-medium text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-1">
          Filtrer par classement :
        </label>
        <select
          id="filter-classement"
          value={selectedClassement}
          onChange={(e) => setSelectedClassement(e.target.value)}
          className="w-full p-2 rounded border bg-neutral-bg-light dark:bg-neutral-bg-dark border-neutral-medium-gray dark:border-neutral-bg-alt-dark focus:ring-primary focus:border-primary text-sm text-neutral-text-light dark:text-neutral-text-dark"
        >
          {classementOptions.map(classement => (
            <option key={classement} value={classement}>
              {classement === '' ? 'Tous les classements' : classement}
            </option>
          ))}
        </select>
      </div>
      <div className="pt-3 text-right">
        <button 
          onClick={() => { setSearchTerm(''); setSelectedClassement(''); setSortConfig({ key: 'nom', direction: 'ascending' }); }} 
          disabled={!searchTerm && !selectedClassement}
          className="text-xs text-secondary dark:text-secondary-light hover:underline font-medium disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Réinitialiser
        </button>
      </div>
    </div>
  );

  // --- Define Headers for Export ---
  const exportHeaders = ['nom', 'classement', 'adresse'];
  const exportHeaderTitles = ['Nom', 'Classement', 'Adresse'];

  // --- Rendu du tableau (pour TabPanel) ---
  const renderTable = () => (
    <div className="overflow-x-auto bg-neutral-surface-light dark:bg-neutral-surface-dark rounded-lg shadow-md">
      <table className="min-w-full divide-y divide-neutral-light-sand dark:divide-neutral-bg-alt-dark">
        <thead className="bg-neutral-light-sand dark:bg-neutral-bg-alt-dark">
          <tr>
            <th scope="col" className="py-3 px-4 text-left text-xs font-medium font-heading text-neutral-text-light dark:text-neutral-text-muted-dark uppercase tracking-wider w-[40%] cursor-pointer hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark" onClick={() => requestSort('nom')}>Nom {getSortIcon('nom')}</th>
            <th scope="col" className="py-3 px-4 text-left text-xs font-medium font-heading text-neutral-text-light dark:text-neutral-text-muted-dark uppercase tracking-wider w-[20%] cursor-pointer hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark" onClick={() => requestSort('classement')}>Classement {getSortIcon('classement')}</th>
            <th scope="col" className="py-3 px-4 text-left text-xs font-medium font-heading text-neutral-text-light dark:text-neutral-text-muted-dark uppercase tracking-wider w-[40%]">Adresse</th>
          </tr>
        </thead>
        <tbody className="divide-y divide-neutral-bg-alt-light dark:divide-neutral-bg-alt-dark">
          {sortedAndFilteredHotels.map((hotel) => (
            <tr key={hotel.id || hotel.nom} className="hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark transition-colors duration-150">
              <td className="py-3 px-4 text-sm font-medium text-neutral-text-light dark:text-neutral-text-dark break-words">{hotel.nom || 'N/A'}</td>
              <td className="py-3 px-4 text-sm text-neutral-text-muted-light dark:text-neutral-text-muted-dark break-words">{hotel.classement || 'N/A'}</td>
              <td className="py-3 px-4 text-sm text-neutral-text-muted-light dark:text-neutral-text-muted-dark break-words">{hotel.adresse || 'N/A'}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );

  // --- Structure Principale de la Page --- 
  return (
    <div className="max-w-full mx-auto px-0 sm:px-0 lg:px-0 py-8 flex"> {/* Full width, flex container */}

      {/* Sidebar (Gauche) */}
      <aside className="w-1/4 xl:w-1/5 hidden md:block border-r border-neutral-light-sand dark:border-neutral-bg-alt-dark pr-6">
        {/* Contenu Sidebar */} 
        {isLoading ? (
          <div className="p-4 text-center">Chargement des filtres...</div>
        ) : error ? (
           <div className="p-4 text-center text-red-500">Erreur chargement filtres</div>
        ) : (
            <>
                <div className="sticky top-4"> {/* Make filters sticky */} 
                    {renderFilters()}
                     <p className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark p-4 italic">
                        {sortedAndFilteredHotels.length} hôtel(s) affiché(s).
                    </p>
                </div>
            </>
        )}
      </aside>

      {/* Main Content (Droite) */} 
      <div className="w-full md:w-3/4 xl:w-4/5 md:pl-6">

        {/* Metadonnées */} 
        <MetadataBlock
          title="Hôtels Classés"
          description="Répertoire des hôtels classés sur le territoire d'Agadir, avec leur classement, adresse et coordonnées géographiques."
          source="Commune d'Agadir / Observatoire du Tourisme"
          dateMaj="2024-04-01"
          licence="Licence Ouverte v2.0"
          tags={['hébergement', 'hôtel', 'classement', 'tourisme', 'établissement']}
        />

        {/* Bannière Image */}
        <div className="my-6 rounded-lg overflow-hidden shadow-md">
          <img
            src={hotelsBannerUrl}
            alt="Bannière hôtels Agadir"
            className="w-full h-40 sm:h-56 object-cover"
          />
        </div>

        {/* Affichage conditionnel pendant le chargement ou erreur */} 
        {isLoading ? (
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
          </div>
        ) : error ? (
          <div className="text-center p-6 bg-red-100 dark:bg-red-900/30 border border-red-300 dark:border-red-700 rounded-lg">
            <p className="text-red-700 dark:text-red-300 text-lg font-body">Erreur lors du chargement: {error}</p>
            <button onClick={() => window.location.reload()} className="mt-4 inline-block bg-accent hover:bg-accent-dark text-white font-semibold px-6 py-2 rounded-lg transition-colors duration-200">
              Réessayer
            </button>
          </div>
        ) : !hotels || hotels.length === 0 ? (
             <div className="text-center py-10 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                Aucune donnée d'hôtel disponible pour le moment.
             </div>
        ) : (
          <>
            {/* Section pour les filtres sur mobile/tablette (masquée sur md et plus) */} 
            <details className="md:hidden mb-4 p-4 bg-neutral-bg-alt-light dark:bg-neutral-surface-dark rounded shadow">
                 <summary className="cursor-pointer font-semibold text-neutral-text-light dark:text-neutral-text-dark">Afficher/Masquer les Filtres</summary>
                 {renderFilters()}
                 <p className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark p-4 italic">
                    {sortedAndFilteredHotels.length} hôtel(s) affiché(s).
                 </p>
             </details>

            {/* Onglets pour les visualisations */} 
            <Tabs>
              {/* Définition des onglets */} 
              <Tab label="Tableau" icon={<FiTable className="inline-block w-4 h-4 mr-1" />} />
              <Tab label="Carte" icon={<FiMap className="inline-block w-4 h-4 mr-1" />} />
              <Tab label="Analyse (Classement)" icon={<FiBarChart2 className="inline-block w-4 h-4 mr-1" />} />

              {/* Panneau 1: Tableau */} 
              <TabPanel>
                <div className="my-4 flex flex-wrap gap-2 justify-end">
                  <button
                    onClick={() => exportToCsv(sortedAndFilteredHotels, exportHeaders, exportHeaderTitles, 'hotels_agadir.csv')}
                    className="px-3 py-1.5 text-xs font-medium text-white bg-primary dark:bg-primary-dark rounded shadow hover:bg-primary-light dark:hover:bg-primary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition duration-150 ease-in-out disabled:opacity-50"
                    disabled={sortedAndFilteredHotels.length === 0}
                    title="Exporter en CSV"
                  >
                    <FiDownload className="inline-block w-3 h-3 mr-1" /> CSV
                  </button>
                  <button
                    onClick={() => exportToXlsx(sortedAndFilteredHotels, exportHeaders, exportHeaderTitles, 'hotels_agadir.xlsx', 'Hôtels')}
                    className="px-3 py-1.5 text-xs font-medium text-white bg-green-600 dark:bg-green-700 rounded shadow hover:bg-green-500 dark:hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-600 transition duration-150 ease-in-out disabled:opacity-50"
                    disabled={sortedAndFilteredHotels.length === 0}
                    title="Exporter en Excel"
                  >
                    <FiDownload className="inline-block w-3 h-3 mr-1" /> XLSX
                  </button>
                  <button
                    onClick={() => exportToPdf(sortedAndFilteredHotels, exportHeaders, exportHeaderTitles, 'hotels_agadir.pdf', 'Liste des Hôtels Classés - Agadir')}
                    className="px-3 py-1.5 text-xs font-medium text-white bg-red-600 dark:bg-red-700 rounded shadow hover:bg-red-500 dark:hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-600 transition duration-150 ease-in-out disabled:opacity-50"
                    disabled={sortedAndFilteredHotels.length === 0}
                    title="Exporter en PDF"
                  >
                    <FiDownload className="inline-block w-3 h-3 mr-1" /> PDF
                  </button>
                </div>
                {sortedAndFilteredHotels.length > 0 ? (
                  renderTable()
                ) : (
                  <p className="text-center py-10 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                    Aucun hôtel ne correspond aux filtres sélectionnés.
                  </p>
                )}
              </TabPanel>

              {/* Panneau 2: Carte */} 
              <TabPanel>
                {sortedAndFilteredHotels.length > 0 ? (
                  <HotelsMap hotels={sortedAndFilteredHotels} />
                ) : (
                  <p className="text-center py-10 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                    Aucun hôtel à afficher sur la carte avec les filtres actuels.
                  </p>
                )}
              </TabPanel>

              {/* Panneau 3: Graphique */} 
              <TabPanel>
                 <p className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-2 italic">
                    Note : Le graphique montre la répartition pour les hôtels *actuellement affichés* après filtrage.
                 </p>
                <HotelsParClassementChart hotels={sortedAndFilteredHotels} theme={theme} />
              </TabPanel>
            </Tabs>
          </>
        )}

        {/* Lien Retour Catalogue */} 
        <div className="mt-10 text-left">
            <Link to="/catalogue" className="inline-block bg-secondary hover:bg-secondary-light text-neutral-charcoal font-semibold px-6 py-2 rounded-lg transition-colors duration-200 text-sm">
                ← Retour au Catalogue
            </Link>
        </div>
      </div>
    </div>
  );
}

export default HotelsPage;

--- END OF FILE: src/pages/HotelsPage.jsx ---

--- START OF FILE: src/pages/JardinsPage.jsx ---
import { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { fetchJardins } from '../services/jardinService';
import JardinsMap from '../components/maps/JardinsMap';
import MetadataBlock from '../components/datasets/MetadataBlock';
import Tabs, { Tab, TabPanel } from '../components/ui/Tabs'; // Importer Tabs
import { FiList, FiMap } from 'react-icons/fi'; // Importer les icônes
import jardinGenericCardUrl from '../assets/jardin-generic-card.jpg'; // <-- Importer l'image générique
import jardinsBannerUrl from '../assets/jardins-banner.jpg'; // <-- Importer la bannière

// Helper to parse equipements string (reste inchangé)
const parseEquipements = (equipementsString) => {
    if (!equipementsString) return [];
    return equipementsString.split('\n').map(e => e.trim()).filter(e => e);
};

function JardinsPage({ theme }) { // theme n'est pas utilisé ici mais gardé pour cohérence
  // --- États --- 
  const [jardins, setJardins] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedQuartier, setSelectedQuartier] = useState(''); // Nouvel état pour le filtre

  // --- Chargement des données --- 
  useEffect(() => {
    async function loadJardins() {
      setIsLoading(true);
      setError(null);
      const { data, error: fetchError } = await fetchJardins();
      if (fetchError) {
        setError(fetchError.message);
        setJardins([]);
      } else {
        // Nettoyage simple des données au chargement si nécessaire
        const cleanData = (data || []).map(j => ({ ...j, quartier: j.quartier?.trim() }));
        setJardins(cleanData);
      }
      setIsLoading(false);
    }
    loadJardins();
  }, []);

  // --- Options de quartier pour le filtre --- 
  const quartierOptions = useMemo(() => {
    const quartiers = new Set(jardins.map(j => j.quartier).filter(Boolean)); // Récupère les quartiers uniques non vides
    return ['', ...Array.from(quartiers).sort()];
  }, [jardins]);

  // --- Logique de filtrage --- 
  const filteredJardins = useMemo(() => {
    return jardins.filter(jardin => {
      const quartierMatch = selectedQuartier === '' || jardin.quartier === selectedQuartier;
      return quartierMatch;
    });
  }, [jardins, selectedQuartier]);

  // --- Rendu des filtres (pour Sidebar et mobile) --- 
  const renderFilters = () => (
    <div className="p-4 space-y-4">
      <h3 className="text-lg font-semibold font-heading text-neutral-text-light dark:text-neutral-text-dark border-b pb-2 mb-3 border-neutral-light-sand dark:border-neutral-bg-alt-dark">
        Filtres
      </h3>
      <div>
        <label htmlFor="filter-quartier" className="block text-sm font-medium text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-1">
          Filtrer par quartier :
        </label>
        <select
          id="filter-quartier"
          value={selectedQuartier}
          onChange={(e) => setSelectedQuartier(e.target.value)}
          className="w-full p-2 rounded border bg-neutral-bg-light dark:bg-neutral-bg-dark border-neutral-medium-gray dark:border-neutral-bg-alt-dark focus:ring-primary focus:border-primary text-sm text-neutral-text-light dark:text-neutral-text-dark"
        >
          {quartierOptions.map(quartier => (
            <option key={quartier} value={quartier}>
              {quartier === '' ? 'Tous les quartiers' : quartier}
            </option>
          ))}
        </select>
      </div>
      <div className="pt-3 text-right">
          <button 
              onClick={() => { setSelectedQuartier(''); }} 
              disabled={!selectedQuartier}
              className="text-xs text-secondary dark:text-secondary-light hover:underline font-medium disabled:opacity-50 disabled:cursor-not-allowed"
          >
              Réinitialiser
          </button>
      </div>
    </div>
  );

  // --- Rendu des cartes (pour TabPanel 'Liste') ---
  const renderCards = () => (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {filteredJardins.map(jardin => {
        // Utilise l'image spécifique si elle existe (ex: jardin.image_url), sinon la générique
        const imageUrl = jardin.image_url || jardinGenericCardUrl; // <-- Logique d'image

        return (
          // Structure de la carte MODIFIÉE pour inclure <img>
          <div key={jardin.id || jardin.nom} className="bg-neutral-surface-light dark:bg-neutral-surface-dark rounded-lg shadow-md overflow-hidden flex flex-col hover:shadow-lg transition-shadow duration-200 border border-neutral-light-sand dark:border-neutral-bg-alt-dark">
            {/* Section Image */}
            <img
              src={imageUrl}
              alt={`Vue de ${jardin.nom || 'Jardin'}`} // Texte alternatif plus descriptif
              className="w-full h-48 object-cover" // Style pour l'image (hauteur fixe, couvre l'espace)
            />
            {/* Card Body */}
            <div className="p-4 flex flex-col flex-grow">
              <h4 className="text-lg font-heading font-bold text-primary dark:text-primary-light mb-2">{jardin.nom}</h4>
              <p className="text-sm font-body text-neutral-text-light dark:text-neutral-text-dark mb-3 flex-grow">
                {jardin.description}
              </p>
              {/* Details Section */} 
              <div className="text-xs border-t border-neutral-light-sand dark:border-neutral-bg-alt-dark pt-3 mt-auto space-y-1 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                <p><strong className="font-semibold text-neutral-text-light dark:text-neutral-text-dark">Quartier:</strong> {jardin.quartier || 'N/A'}</p>
                <p><strong className="font-semibold text-neutral-text-light dark:text-neutral-text-dark">Horaires:</strong> {jardin.horaires || 'N/A'}</p>
                {parseEquipements(jardin.equipements).length > 0 && (
                  <div>
                    <strong className="font-semibold text-neutral-text-light dark:text-neutral-text-dark">Équipements:</strong>
                    <ul className="list-disc list-inside pl-2">
                      {parseEquipements(jardin.equipements).map((item, index) => (
                        <li key={index}>{item}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );

  // --- Structure Principale de la Page --- 
  return (
    <div className="max-w-full mx-auto px-0 sm:px-0 lg:px-0 py-8 flex"> {/* Full width, flex container */}

      {/* Sidebar (Gauche) */} 
      <aside className="w-1/4 xl:w-1/5 hidden md:block border-r border-neutral-light-sand dark:border-neutral-bg-alt-dark pr-6">
        {/* Contenu Sidebar */} 
        {isLoading ? (
          <div className="p-4 text-center">Chargement des filtres...</div>
        ) : error ? (
           <div className="p-4 text-center text-red-500">Erreur chargement filtres</div>
        ) : (
            <>
                <div className="sticky top-4"> {/* Make filters sticky */} 
                    {renderFilters()}
                     <p className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark p-4 italic">
                        {filteredJardins.length} jardin(s) affiché(s).
                    </p>
                </div>
            </>
        )}
      </aside>

      {/* Main Content (Droite) */} 
      <div className="w-full md:w-3/4 xl:w-4/5 md:pl-6">

        {/* Metadonnées */} 
        <MetadataBlock
          title="Jardins Publics"
          description="Localisation et informations sur les parcs et jardins publics accessibles à Agadir, incluant description et équipements."
          source="Commune d'Agadir - Service des Espaces Verts"
          dateMaj="2024-02-20"
          licence="Licence Ouverte v2.0"
          tags={['parc', 'jardin', 'vert', 'espace public', 'nature', 'loisir']}
        />

        {/* Bannière Image */}
        <div className="my-6 rounded-lg overflow-hidden shadow-md">
            <img
                src={jardinsBannerUrl}
                alt="Bannière jardins Agadir"
                className="w-full h-40 sm:h-56 object-cover"
            />
        </div>

        {/* Affichage conditionnel pendant le chargement ou erreur */} 
        {isLoading ? (
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
          </div>
        ) : error ? (
          <div className="text-center p-6 bg-red-100 dark:bg-red-900/30 border border-red-300 dark:border-red-700 rounded-lg">
            <p className="text-red-700 dark:text-red-300 text-lg font-body">Erreur lors du chargement: {error}</p>
            <button onClick={() => window.location.reload()} className="mt-4 inline-block bg-accent hover:bg-accent-dark text-white font-semibold px-6 py-2 rounded-lg transition-colors duration-200">
              Réessayer
            </button>
          </div>
        ) : !jardins || jardins.length === 0 ? (
            <div className="text-center py-10 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                Aucune donnée de jardin disponible pour le moment.
            </div>
        ) : (
          <>
            {/* Section pour les filtres sur mobile/tablette (masquée sur md et plus) */} 
            <details className="md:hidden mb-4 p-4 bg-neutral-bg-alt-light dark:bg-neutral-surface-dark rounded shadow">
                 <summary className="cursor-pointer font-semibold text-neutral-text-light dark:text-neutral-text-dark">Afficher/Masquer les Filtres</summary>
                 {renderFilters()}
                 <p className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark p-4 italic">
                    {filteredJardins.length} jardin(s) affiché(s).
                 </p>
             </details>

            {/* Onglets pour les visualisations */} 
            <Tabs>
              {/* Définition des onglets */} 
              <Tab label="Liste (Cartes)" icon={<FiList className="inline-block w-4 h-4 mr-1" />} />
              <Tab label="Carte" icon={<FiMap className="inline-block w-4 h-4 mr-1" />} />

              {/* Panneau 1: Cartes */} 
              <TabPanel>
                {filteredJardins.length > 0 ? (
                  renderCards()
                ) : (
                  <p className="text-center py-10 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                    Aucun jardin ne correspond aux filtres sélectionnés.
                  </p>
                )}
              </TabPanel>

              {/* Panneau 2: Carte */} 
              <TabPanel>
                {filteredJardins.length > 0 ? (
                  <JardinsMap jardins={filteredJardins} />
                ) : (
                  <p className="text-center py-10 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                    Aucun jardin à afficher sur la carte avec les filtres actuels.
                  </p>
                )}
              </TabPanel>
            </Tabs>
          </>
        )}

        {/* Lien Retour Catalogue */} 
        <div className="mt-10 text-left">
            <Link to="/catalogue" className="inline-block bg-secondary hover:bg-secondary-light text-neutral-charcoal font-semibold px-6 py-2 rounded-lg transition-colors duration-200 text-sm">
                ← Retour au Catalogue
            </Link>
        </div>
      </div>
    </div>
  );
}

export default JardinsPage;

--- END OF FILE: src/pages/JardinsPage.jsx ---

--- START OF FILE: src/pages/LignesBusPage.jsx ---
// src/pages/LignesBusPage.jsx
import { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { fetchLignesBus } from '../services/busService';
import MetadataBlock from '../components/datasets/MetadataBlock';
import Tabs, { Tab, TabPanel } from '../components/ui/Tabs'; // Importer Tabs
import { FiTable, FiDownload } from 'react-icons/fi'; // Importer les icônes + FiDownload
import busBannerUrl from '../assets/bus-banner.jpg'; // Importer la bannière
// --- Import Export Utils ---
import { exportToCsv, exportToXlsx, exportToPdf } from '../utils/exportUtils';

function LignesBusPage({ theme }) { // theme non utilisé mais gardé
  // --- États ---
  const [lignesBus, setLignesBus] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortConfig, setSortConfig] = useState({ key: 'numero_ligne', direction: 'ascending' });

  // --- Chargement des données ---
  useEffect(() => {
    async function loadData() {
      setIsLoading(true);
      setError(null);
      const { data, error: fetchError } = await fetchLignesBus();
      // console.log("Fetched data from Supabase:", data); // Log fetched data
      setLignesBus(data || []);
      setError(fetchError?.message || null);
      setIsLoading(false);
    }
    loadData();
  }, []);

  // --- Logique de filtrage et tri ---
  const filteredAndSortedLignes = useMemo(() => {
    let filtered = lignesBus.filter(ligne => {
      const searchLower = searchTerm.toLowerCase();
      return (
        (ligne?.numero_ligne ?? '').toLowerCase().includes(searchLower) ||
        (ligne?.designation ?? '').toLowerCase().includes(searchLower) ||
        (ligne?.detail_depart ?? '').toLowerCase().includes(searchLower) ||
        (ligne?.detail_arrivee ?? '').toLowerCase().includes(searchLower)
      );
    });

    if (sortConfig.key !== null) {
      const extractLineNumber = (numStr) => parseInt(numStr?.substring(1) || '0', 10);
      filtered.sort((a, b) => {
        const key = sortConfig.key;
        let comparison = 0;
        if (key === 'numero_ligne') {
          comparison = extractLineNumber(a[key]) - extractLineNumber(b[key]);
        } else {
          const valA = a[key] ?? '';
          const valB = b[key] ?? '';
          comparison = valA.localeCompare(valB, 'fr', { sensitivity: 'base' });
        }
        return sortConfig.direction === 'descending' ? (comparison * -1) : comparison;
      });
    }
    return filtered;
  }, [lignesBus, searchTerm, sortConfig]);

  // --- Fonctions de tri ---
  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };
  const getSortIcon = (columnKey) => {
    if (sortConfig.key !== columnKey) return <span className="opacity-30 ml-1">↕</span>;
    return sortConfig.direction === 'ascending' ? <span className="opacity-80 ml-1">▲</span> : <span className="opacity-80 ml-1">▼</span>;
  };

  // --- Rendu des filtres (Sidebar et mobile) ---
  const renderFilters = () => (
    <div className="p-4 space-y-4">
      <h3 className="text-lg font-semibold font-heading text-neutral-text-light dark:text-neutral-text-dark border-b pb-2 mb-3 border-neutral-light-sand dark:border-neutral-bg-alt-dark">
        Filtres
      </h3>
      <div>
        <label htmlFor="search-ligne" className="block text-sm font-medium text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-1">
          Rechercher :
        </label>
        <input
          type="text"
          id="search-ligne"
          placeholder="N°, désignation, arrêt..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full p-2 rounded border bg-neutral-bg-light dark:bg-neutral-bg-dark border-neutral-medium-gray dark:border-neutral-bg-alt-dark focus:ring-primary focus:border-primary text-sm text-neutral-text-light dark:text-neutral-text-dark placeholder-neutral-text-muted-light dark:placeholder-neutral-text-muted-dark"
        />
      </div>
       <div className="pt-3 text-right">
          <button 
              onClick={() => { setSearchTerm(''); setSortConfig({ key: 'numero_ligne', direction: 'ascending' });}} 
              disabled={!searchTerm}
              className="text-xs text-secondary dark:text-secondary-light hover:underline font-medium disabled:opacity-50 disabled:cursor-not-allowed"
          >
              Réinitialiser
          </button>
      </div>
    </div>
  );

  // --- Define Headers for Export ---
  const exportHeaders = ['numero_ligne', 'designation', 'detail_depart', 'detail_arrivee'];
  const exportHeaderTitles = ['Ligne', 'Désignation', 'Détail Départ', 'Détail Arrivée'];

  // --- Rendu du tableau (TabPanel) ---
  const renderTable = () => (
    <div className="overflow-x-auto bg-neutral-surface-light dark:bg-neutral-surface-dark rounded-lg shadow-md">
      <table className="min-w-full divide-y divide-neutral-light-sand dark:divide-neutral-bg-alt-dark table-auto">
        <thead className="bg-neutral-light-sand dark:bg-neutral-bg-alt-dark">
          <tr>
            <th scope="col" className="py-3 px-4 text-left text-xs font-medium font-heading text-neutral-text-light dark:text-neutral-text-muted-dark uppercase tracking-wider w-[10%] cursor-pointer hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark" onClick={() => requestSort('numero_ligne')}>Ligne {getSortIcon('numero_ligne')}</th>
            <th scope="col" className="py-3 px-4 text-left text-xs font-medium font-heading text-neutral-text-light dark:text-neutral-text-muted-dark uppercase tracking-wider w-[30%] cursor-pointer hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark" onClick={() => requestSort('designation')}>Désignation {getSortIcon('designation')}</th>
            <th scope="col" className="py-3 px-4 text-left text-xs font-medium font-heading text-neutral-text-light dark:text-neutral-text-muted-dark uppercase tracking-wider w-[30%] cursor-pointer hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark" onClick={() => requestSort('detail_depart')}>Détail Départ {getSortIcon('detail_depart')}</th>
            <th scope="col" className="py-3 px-4 text-left text-xs font-medium font-heading text-neutral-text-light dark:text-neutral-text-muted-dark uppercase tracking-wider w-[30%] cursor-pointer hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark" onClick={() => requestSort('detail_arrivee')}>Détail Arrivée {getSortIcon('detail_arrivee')}</th>
          </tr>
        </thead>
        <tbody className="divide-y divide-neutral-bg-alt-light dark:divide-neutral-bg-alt-dark">
          {filteredAndSortedLignes.map((ligne) => (
            <tr key={ligne.numero_ligne} className="hover:bg-neutral-bg-alt-light dark:hover:bg-neutral-bg-alt-dark transition-colors duration-150">
              <td className="py-3 px-4 whitespace-nowrap text-sm font-semibold text-neutral-text-light dark:text-neutral-text-dark">{ligne.numero_ligne}</td>
              <td className="py-3 px-4 text-sm text-neutral-text-light dark:text-neutral-text-dark">{ligne.designation ?? '-'}</td>
              <td className="py-3 px-4 text-sm text-neutral-text-muted-light dark:text-neutral-text-muted-dark">{ligne.detail_depart ?? '-'}</td>
              <td className="py-3 px-4 text-sm text-neutral-text-muted-light dark:text-neutral-text-muted-dark">{ligne.detail_arrivee ?? '-'}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );

  // --- Structure Principale de la Page ---
  return (
    <div className="max-w-full mx-auto px-0 sm:px-0 lg:px-0 py-8 flex"> {/* Full width, flex container */}

      {/* Sidebar (Gauche) */} 
      <aside className="w-1/4 xl:w-1/5 hidden md:block border-r border-neutral-light-sand dark:border-neutral-bg-alt-dark pr-6">
        {/* Contenu Sidebar */} 
        {isLoading ? (
          <div className="p-4 text-center">Chargement des filtres...</div>
        ) : error ? (
           <div className="p-4 text-center text-red-500">Erreur chargement filtres</div>
        ) : (
            <>
                <div className="sticky top-4"> {/* Make filters sticky */} 
                    {renderFilters()}
                     <p className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark p-4 italic">
                        {filteredAndSortedLignes.length} ligne(s) affichée(s).
                    </p>
                </div>
            </>
        )}
      </aside>

      {/* Main Content (Droite) */} 
      <div className="w-full md:w-3/4 xl:w-4/5 md:pl-6">

        {/* Metadonnées */} 
        <MetadataBlock
          title="Lignes de Bus Urbain"
          description="Tracés et détails des lignes du réseau de bus urbain Alsa desservant Agadir et ses environs."
          source="Alsa Agadir / Commune d'Agadir"
          dateMaj="2023-12-10"
          licence="Licence Spécifique (à vérifier)"
          tags={['bus', 'transport', 'mobilité', 'Alsa', 'urbain', 'réseau']}
        />

        {/* Bannière Image */}
        <div className="my-6 rounded-lg overflow-hidden shadow-md">
          <img
            src={busBannerUrl}
            alt="Bannière bus Agadir"
            className="w-full h-40 sm:h-56 object-cover"
          />
        </div>

        {/* Affichage conditionnel pendant le chargement ou erreur */} 
        {isLoading ? (
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
          </div>
        ) : error ? (
          <div className="text-center p-6 bg-red-100 dark:bg-red-900/30 border border-red-300 dark:border-red-700 rounded-lg">
            <p className="text-red-700 dark:text-red-300 text-lg font-body">Erreur lors du chargement: {error}</p>
            <button onClick={() => window.location.reload()} className="mt-4 inline-block bg-accent hover:bg-accent-dark text-white font-semibold px-6 py-2 rounded-lg transition-colors duration-200">
              Réessayer
            </button>
          </div>
        ) : !lignesBus || lignesBus.length === 0 ? (
            <div className="text-center py-10 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                Aucune donnée de ligne de bus disponible pour le moment.
            </div>
        ) : (
          <>
             {/* Section pour les filtres sur mobile/tablette (masquée sur md et plus) */} 
             <details className="md:hidden mb-4 p-4 bg-neutral-bg-alt-light dark:bg-neutral-surface-dark rounded shadow">
                 <summary className="cursor-pointer font-semibold text-neutral-text-light dark:text-neutral-text-dark">Afficher/Masquer les Filtres</summary>
                 {renderFilters()}
                 <p className="text-xs text-neutral-text-muted-light dark:text-neutral-text-muted-dark p-4 italic">
                    {filteredAndSortedLignes.length} ligne(s) affichée(s).
                 </p>
             </details>

            {/* Onglet unique pour le tableau */} 
            <Tabs>
              {/* Définition de l'onglet */} 
              <Tab label="Tableau" icon={<FiTable className="inline-block w-4 h-4 mr-1" />} />

              {/* Panneau Tableau */} 
              <TabPanel>
                <div className="my-4 flex flex-wrap gap-2 justify-end">
                  <button
                    onClick={() => exportToCsv(filteredAndSortedLignes, exportHeaders, exportHeaderTitles, 'lignes_bus_agadir.csv')}
                    className="px-3 py-1.5 text-xs font-medium text-white bg-primary dark:bg-primary-dark rounded shadow hover:bg-primary-light dark:hover:bg-primary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition duration-150 ease-in-out disabled:opacity-50"
                    disabled={filteredAndSortedLignes.length === 0}
                    title="Exporter en CSV"
                  >
                    <FiDownload className="inline-block w-3 h-3 mr-1" /> CSV
                  </button>
                  <button
                    onClick={() => exportToXlsx(filteredAndSortedLignes, exportHeaders, exportHeaderTitles, 'lignes_bus_agadir.xlsx', 'Lignes de Bus')}
                    className="px-3 py-1.5 text-xs font-medium text-white bg-green-600 dark:bg-green-700 rounded shadow hover:bg-green-500 dark:hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-600 transition duration-150 ease-in-out disabled:opacity-50"
                    disabled={filteredAndSortedLignes.length === 0}
                    title="Exporter en Excel"
                  >
                    <FiDownload className="inline-block w-3 h-3 mr-1" /> XLSX
                  </button>
                  <button
                    onClick={() => exportToPdf(filteredAndSortedLignes, exportHeaders, exportHeaderTitles, 'lignes_bus_agadir.pdf', 'Lignes de Bus Urbain - Agadir')}
                    className="px-3 py-1.5 text-xs font-medium text-white bg-red-600 dark:bg-red-700 rounded shadow hover:bg-red-500 dark:hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-600 transition duration-150 ease-in-out disabled:opacity-50"
                    disabled={filteredAndSortedLignes.length === 0}
                    title="Exporter en PDF"
                  >
                    <FiDownload className="inline-block w-3 h-3 mr-1" /> PDF
                  </button>
                </div>

                {filteredAndSortedLignes.length > 0 ? (
                  renderTable()
                ) : (
                  <p className="text-center py-10 text-neutral-text-muted-light dark:text-neutral-text-muted-dark">
                    Aucune ligne ne correspond à la recherche.
                  </p>
                )}
              </TabPanel>
            </Tabs>
          </>
        )}

        {/* Lien Retour Catalogue */} 
        <div className="mt-10 text-left">
            <Link to="/catalogue" className="inline-block bg-secondary hover:bg-secondary-light text-neutral-charcoal font-semibold px-6 py-2 rounded-lg transition-colors duration-200 text-sm">
                ← Retour au Catalogue
            </Link>
        </div>
      </div>
    </div>
  );
}

export default LignesBusPage;
--- END OF FILE: src/pages/LignesBusPage.jsx ---

--- START OF FILE: src/pages/NotFoundPage.jsx ---
import { Link } from 'react-router-dom';

function NotFoundPage() {
  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8">
      <h2 className="text-3xl font-heading font-bold text-neutral-text-light dark:text-neutral-text-dark mb-4">
        Page non trouvée
      </h2>
      <p className="text-neutral-text-muted-light dark:text-neutral-text-muted-dark mb-4">
        La page que vous recherchez n'existe pas.
      </p>
      <Link
        to="/"
        className="inline-block bg-primary hover:bg-primary-light text-white font-semibold px-6 py-2 rounded-lg transition-colors duration-200"
      >
        Retour à l'accueil
      </Link>
    </div>
  );
}

export default NotFoundPage;

--- END OF FILE: src/pages/NotFoundPage.jsx ---

--- START OF FILE: src/services/busService.js ---
import { supabase } from '../supabaseClient';

/**
 * Récupère toutes les lignes de bus depuis Supabase.
 * @returns {Promise<{data: Array|null, error: Object|null}>} Un objet avec les données ou une erreur.
 */
export async function fetchLignesBus() {
  console.log('Attempting to fetch lignes_bus...');
  const { data, error } = await supabase
    .from('lignes_bus')
    .select('*')
    .order('numero_ligne', { ascending: true });

  if (error) {
    console.error('Error fetching lignes_bus:', error);
  } else {
    console.log('Lignes de bus fetched successfully:', data);
  }

  return { data, error };
}

--- END OF FILE: src/services/busService.js ---

--- START OF FILE: src/services/equipementService.js ---
import { supabase } from '../supabaseClient'; // Importe le client Supabase configuré

/**
 * Récupère tous les équipements sportifs depuis Supabase.
 * @returns {Promise<{data: Array|null, error: Object|null}>} Un objet avec les données ou une erreur.
 */
export async function fetchEquipements() {
  console.log('Attempting to fetch equipements...'); // Log pour débogage
  const { data, error } = await supabase
    .from('equipements_sportifs') // Nom de votre table
    .select('*'); // Sélectionne toutes les colonnes

  if (error) {
    console.error('Error fetching equipements:', error); // Log l'erreur
  } else {
    console.log('Equipements fetched successfully:', data); // Log les données reçues
  }

  return { data, error };
}

// Vous pourrez ajouter d'autres fonctions ici plus tard (ex: fetchEquipementById)

--- END OF FILE: src/services/equipementService.js ---

--- START OF FILE: src/services/hotelService.js ---
// src/services/hotelService.js
import { supabase } from '../supabaseClient'; // Importe le client Supabase configuré

/**
 * Récupère tous les hôtels depuis Supabase.
 * @returns {Promise<{data: Array|null, error: Object|null}>} Un objet avec les données ou une erreur.
 */
export async function fetchHotels() {
  console.log('Attempting to fetch hotels...'); // Log pour débogage
  const { data, error } = await supabase
    .from('hotels') // Nom de la nouvelle table
    .select('*'); // Sélectionne toutes les colonnes (incluant nom, classement, geom, etc.)

  if (error) {
    console.error('Error fetching hotels:', error); // Log l'erreur
  } else {
    console.log('Hotels fetched successfully:', data); // Log les données reçues
  }

  return { data, error };
}

// Vous pourrez ajouter d'autres fonctions ici plus tard (ex: fetchHotelById)

--- END OF FILE: src/services/hotelService.js ---

--- START OF FILE: src/services/jardinService.js ---
import { supabase } from '../supabaseClient';

/**
 * Récupère tous les jardins depuis Supabase.
 * @returns {Promise<{data: Array|null, error: Object|null}>} Un objet avec les données ou une erreur.
 */
export async function fetchJardins() {
  console.log('Attempting to fetch jardins...');
  const { data, error } = await supabase
    .from('jardins')
    .select('*');

  if (error) {
    console.error('Error fetching jardins:', error);
  } else {
    console.log('Jardins fetched successfully:', data);
  }

  return { data, error };
}

--- END OF FILE: src/services/jardinService.js ---

--- START OF FILE: src/supabaseClient.js ---
﻿import { createClient } from '@supabase/supabase-js'

// Récupère l'URL et la clé anonyme depuis les variables d'environnement
// Le VITE_ prefix est important pour que Vite expose ces variables au client
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

// Crée et exporte le client Supabase
export const supabase = createClient(supabaseUrl, supabaseAnonKey)

--- END OF FILE: src/supabaseClient.js ---

--- START OF FILE: src/utils/exportUtils.js ---
// src/utils/exportUtils.js
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable'; // Import the function directly

/**
 * Triggers a browser download for the given content.
 * @param {string} content The content to download.
 * @param {string} filename The desired filename.
 * @param {string} mimeType The MIME type of the content.
 */
function triggerDownload(content, filename, mimeType) {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

/**
 * Converts an array of objects to a CSV string.
 * Handles basic quoting for commas and newlines.
 * @param {Array<Object>} data Array of data objects.
 * @param {Array<string>} headers Array of header strings (keys).
 * @param {Array<string>} headerTitles Array of display titles for headers.
 * @returns {string} CSV formatted string.
 */
function arrayToCsv(data, headers, headerTitles) {
  const escapeCsvCell = (cellData) => {
    const stringData = cellData === null || cellData === undefined ? '' : String(cellData);
    // Quote if it contains comma, quote, or newline
    if (stringData.includes(',') || stringData.includes('"') || stringData.includes('\n')) {
      return `"${stringData.replace(/"/g, '""')}"`; // Escape quotes by doubling them
    }
    return stringData;
  };

  const csvRows = [];
  // Add header row
  csvRows.push(headerTitles.map(escapeCsvCell).join(','));

  // Add data rows
  data.forEach(row => {
    const values = headers.map(header => escapeCsvCell(row[header]));
    csvRows.push(values.join(','));
  });

  return csvRows.join('\n');
}

// --- Export Functions ---

/**
 * Exports data to a CSV file.
 * @param {Array<Object>} data The data array.
 * @param {Array<string>} headers The object keys to include.
 * @param {Array<string>} headerTitles The display titles for columns.
 * @param {string} filename The desired filename (e.g., 'equipements.csv').
 */
export function exportToCsv(data, headers, headerTitles, filename) {
  if (!data || data.length === 0) {
    alert("Aucune donnée à exporter.");
    return;
  }
  try {
    const csvContent = arrayToCsv(data, headers, headerTitles);
    // Add BOM for Excel compatibility with UTF-8 special characters
    const bom = '\uFEFF';
    triggerDownload(bom + csvContent, filename, 'text/csv;charset=utf-8;');
  } catch (error) {
     console.error("Erreur lors de la génération CSV:", error);
     alert("Une erreur est survenue lors de la génération du fichier CSV.");
  }
}

/**
 * Exports data to an XLSX (Excel) file.
 * @param {Array<Object>} data The data array.
 * @param {Array<string>} headers The object keys to include.
 * @param {Array<string>} headerTitles The display titles for columns.
 * @param {string} filename The desired filename (e.g., 'hotels.xlsx').
 * @param {string} sheetName The name for the Excel sheet.
 */
export function exportToXlsx(data, headers, headerTitles, filename, sheetName = 'Données') {
  if (!data || data.length === 0) {
    alert("Aucune donnée à exporter.");
    return;
  }
  try {
    // Map data to match header order and titles
    const mappedData = data.map(row => {
      const newRow = {};
      headers.forEach((header, index) => {
        newRow[headerTitles[index]] = row[header] ?? ''; // Use display title as key, handle null/undefined
      });
      return newRow;
    });

    const ws = XLSX.utils.json_to_sheet(mappedData, { header: headerTitles }); // Use headerTitles directly
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, sheetName);
    XLSX.writeFile(wb, filename);
  } catch (error) {
    console.error("Erreur lors de la génération XLSX:", error);
    alert("Une erreur est survenue lors de la génération du fichier Excel.");
  }
}

/**
 * Exports data to a PDF file using jspdf and jspdf-autotable.
 * @param {Array<Object>} data The data array.
 * @param {Array<string>} headers The object keys to include.
 * @param {Array<string>} headerTitles The display titles for columns.
 * @param {string} filename The desired filename (e.g., 'lignes_bus.pdf').
 * @param {string} title The title to display at the top of the PDF.
 */
export function exportToPdf(data, headers, headerTitles, filename, title) {
  if (!data || data.length === 0) {
    alert("Aucune donnée à exporter.");
    return;
  }
  try {
    const doc = new jsPDF({
        orientation: 'landscape', // Use landscape for potentially wide tables
    });

    // Add title
    doc.setFontSize(16);
    doc.text(title, 14, 15); // Adjust position as needed

    // Prepare data for autoTable
    const tableData = data.map(row => headers.map(header => row[header] ?? '')); // Get values in header order

    autoTable(doc, { // Call autoTable as a function, passing 'doc'
      startY: 22, // Position below the title
      head: [headerTitles], // Header row expects an array of arrays
      body: tableData,
      theme: 'grid', // Options: 'striped', 'grid', 'plain'
      styles: {
        fontSize: 8,
        cellPadding: 2,
        overflow: 'linebreak', // Handle long text
      },
      headStyles: {
        fillColor: [62, 140, 170], // Primary color approx.
        textColor: 255,
        fontStyle: 'bold',
      },
      columnStyles: { // Optional: Adjust column widths if needed
          // 0: { cellWidth: 30 }, // Example: Set width for the first column
      }
      // didDrawPage: function (data) { // Optional: Add page numbers or other footers
      //   doc.setFontSize(10);
      //   doc.text('Page ' + doc.internal.getNumberOfPages(), data.settings.margin.left, doc.internal.pageSize.height - 10);
      // }
    });

    doc.save(filename);
  } catch (error) {
    console.error("Erreur lors de la génération PDF:", error);
    alert(`Une erreur est survenue lors de la génération du fichier PDF: ${error.message}`);
  }
}

--- END OF FILE: src/utils/exportUtils.js ---

--- START OF FILE: tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        primary: {
          light: '#65A7C0',
          DEFAULT: '#3E8CAA',
          dark: '#2A6F8C',
        },
        secondary: {
          light: '#F0E6D6',
          DEFAULT: '#E2D1B5',
          dark: '#C9B596',
        },
        accent: {
          light: '#F2AA7A',
          DEFAULT: '#E88C50',
          dark: '#D06F35',
        },
        neutral: {
          'soft-white': '#F8F9FA',
          'light-sand': '#F2EBE1',
          'charcoal': '#303841',
          'medium-gray': '#8A959E',
          'bg-light': '#F8F9FA',
          'surface-light': '#FFFFFF',
          'bg-alt-light': '#F2EBE1',
          'text-light': '#303841',
          'text-muted-light': '#8A959E',
          'bg-dark': '#303841',
          'surface-dark': '#3A444E',
          'bg-alt-dark': '#495057',
          'text-dark': '#F8F9FA',
          'text-muted-dark': '#ADB5BD',
        }
      },
      fontFamily: {
        heading: ['Playfair Display', 'serif'],
        body: ['Open Sans', 'sans-serif'],
      },
    },
  },
  plugins: [],
}

--- END OF FILE: tailwind.config.js ---

--- START OF FILE: vite.config.js ---
// vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { VitePWA } from 'vite-plugin-pwa'; // Import the plugin

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      // ---- Basic PWA Configuration ----
      registerType: 'autoUpdate', // Automatically update PWA when new content is available
      injectRegister: 'auto', // Let the plugin handle injecting the registration script

      // ---- Web App Manifest ----
      manifest: {
        name: 'Portail OpenData Agadir', // Full app name
        short_name: 'OpenDataAgadir', // Short name for homescreen icon
        description: 'Explorez, visualisez et téléchargez les données ouvertes de la Commune d\'Agadir.',
        theme_color: '#3E8CAA', // Your primary theme color
        background_color: '#F8F9FA', // Your light mode background color
        display: 'standalone', // App-like feel
        scope: '/',
        start_url: '/',
        icons: [
          // --- Reference your icons placed in public/ ---
          {
            src: 'pwa-192x192.png', // Make sure this exists in public/
            sizes: '192x192',
            type: 'image/png',
            purpose: 'any maskable', // Use 'maskable' if your icon is designed for it
          },
          {
            src: 'pwa-512x512.png', // Make sure this exists in public/
            sizes: '512x512',
            type: 'image/png',
            purpose: 'any maskable', // Use 'maskable' if your icon is designed for it
          },
          // Add other sizes from your list if you created them (e.g., 144x144, 256x256)
          // {
          //   src: 'pwa-144x144.png',
          //   sizes: '144x144',
          //   type: 'image/png',
          //   purpose: 'any'
          // },
        ],
      },

      // ---- Service Worker Configuration (Workbox) ----
      workbox: {
        // Precache assets generated during build
        globPatterns: ['**/*.{js,css,html,ico,png,svg,jpg,jpeg,woff,woff2}'],

        // Runtime Caching for API calls and other assets
        runtimeCaching: [
          {
            // Cache API calls to Supabase
            urlPattern: ({ url }) => url.pathname.startsWith('/rest/v1/'),
            handler: 'NetworkFirst', // Try network, fallback to cache
            options: {
              cacheName: 'api-cache',
              expiration: {
                maxEntries: 50,
                maxAgeSeconds: 60 * 60 * 24 * 7, // 1 week
              },
              cacheableResponse: { statuses: [0, 200] },
            },
          },
          {
            // Cache common image/font assets
            urlPattern: /\.(?:png|gif|jpg|jpeg|svg|woff|woff2)$/,
            handler: 'CacheFirst', // Serve from cache first
            options: {
              cacheName: 'asset-cache',
              expiration: {
                maxEntries: 100,
                maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
              },
              cacheableResponse: { statuses: [0, 200] },
            },
          },
        ],
      },

      // ---- Development Options ----
      devOptions: {
        enabled: false, // Keep disabled for faster dev reloads
        type: 'module',
      },
    }),
  ],
});

--- END OF FILE: vite.config.js ---

